Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> elements
Rule 2     elements -> elements element
Rule 3     elements -> <empty>
Rule 4     element -> declarations fundefs_opt instructions_opt
Rule 5     declarations -> declarations declaration
Rule 6     declarations -> <empty>
Rule 7     declaration -> TYPE inits ;
Rule 8     declaration -> error ;
Rule 9     inits -> inits , init
Rule 10    inits -> init
Rule 11    init -> ID = expression
Rule 12    instructions_opt -> instructions
Rule 13    instructions_opt -> <empty>
Rule 14    instructions -> instructions instruction
Rule 15    instructions -> instruction
Rule 16    instruction -> print_instr
Rule 17    instruction -> labeled_instr
Rule 18    instruction -> assignment
Rule 19    instruction -> choice_instr
Rule 20    instruction -> while_instr
Rule 21    instruction -> repeat_instr
Rule 22    instruction -> return_instr
Rule 23    instruction -> break_instr
Rule 24    instruction -> continue_instr
Rule 25    instruction -> compound_instr
Rule 26    instruction -> expression ;
Rule 27    print_instr -> PRINT expr_list ;
Rule 28    print_instr -> PRINT error ;
Rule 29    labeled_instr -> ID : instruction
Rule 30    assignment -> ID = expression ;
Rule 31    choice_instr -> IF ( condition ) instruction
Rule 32    choice_instr -> IF ( error ) instruction
Rule 33    choice_instr -> IF ( condition ) instruction ELSE instruction
Rule 34    choice_instr -> IF ( error ) instruction ELSE instruction
Rule 35    while_instr -> WHILE ( condition ) instruction
Rule 36    while_instr -> WHILE ( error ) instruction
Rule 37    repeat_instr -> REPEAT instructions UNTIL condition ;
Rule 38    return_instr -> RETURN expression ;
Rule 39    continue_instr -> CONTINUE ;
Rule 40    break_instr -> BREAK ;
Rule 41    compound_instr -> { declarations instructions_opt }
Rule 42    condition -> expression
Rule 43    const -> INTEGER
Rule 44    const -> FLOAT
Rule 45    const -> STRING
Rule 46    expression -> const
Rule 47    expression -> ID
Rule 48    expression -> ( expression )
Rule 49    expression -> ( error )
Rule 50    expression -> ID ( expr_list_or_empty )
Rule 51    expression -> ID ( error )
Rule 52    expression -> expression + expression
Rule 53    expression -> expression - expression
Rule 54    expression -> expression * expression
Rule 55    expression -> expression / expression
Rule 56    expression -> expression % expression
Rule 57    expression -> expression | expression
Rule 58    expression -> expression & expression
Rule 59    expression -> expression ^ expression
Rule 60    expression -> expression AND expression
Rule 61    expression -> expression OR expression
Rule 62    expression -> expression SHL expression
Rule 63    expression -> expression SHR expression
Rule 64    expression -> expression EQ expression
Rule 65    expression -> expression NEQ expression
Rule 66    expression -> expression > expression
Rule 67    expression -> expression < expression
Rule 68    expression -> expression LE expression
Rule 69    expression -> expression GE expression
Rule 70    expr_list_or_empty -> expr_list
Rule 71    expr_list_or_empty -> <empty>
Rule 72    expr_list -> expr_list , expression
Rule 73    expr_list -> expression
Rule 74    fundefs_opt -> fundefs
Rule 75    fundefs_opt -> <empty>
Rule 76    fundefs -> fundefs fundef
Rule 77    fundefs -> fundef
Rule 78    fundef -> TYPE ID ( args_list_or_empty ) compound_instr
Rule 79    args_list_or_empty -> args_list
Rule 80    args_list_or_empty -> <empty>
Rule 81    args_list -> args_list , arg
Rule 82    args_list -> arg
Rule 83    arg -> TYPE ID

Terminals, with rules where they appear

%                    : 56
&                    : 58
(                    : 31 32 33 34 35 36 48 49 50 51 78
)                    : 31 32 33 34 35 36 48 49 50 51 78
*                    : 54
+                    : 52
,                    : 9 72 81
-                    : 53
/                    : 55
:                    : 29
;                    : 7 8 26 27 28 30 37 38 39 40
<                    : 67
=                    : 11 30
>                    : 66
AND                  : 60
BREAK                : 40
CONTINUE             : 39
ELSE                 : 33 34
EQ                   : 64
FLOAT                : 44
GE                   : 69
ID                   : 11 29 30 47 50 51 78 83
IF                   : 31 32 33 34
INTEGER              : 43
LE                   : 68
NEQ                  : 65
OR                   : 61
PRINT                : 27 28
REPEAT               : 37
RETURN               : 38
SHL                  : 62
SHR                  : 63
STRING               : 45
TYPE                 : 7 78 83
UNTIL                : 37
WHILE                : 35 36
^                    : 59
error                : 8 28 32 34 36 49 51
{                    : 41
|                    : 57
}                    : 41

Nonterminals, with rules where they appear

arg                  : 81 82
args_list            : 79 81
args_list_or_empty   : 78
assignment           : 18
break_instr          : 23
choice_instr         : 19
compound_instr       : 25 78
condition            : 31 33 35 37
const                : 46
continue_instr       : 24
declaration          : 5
declarations         : 4 5 41
element              : 2
elements             : 1 2
expr_list            : 27 70 72
expr_list_or_empty   : 50
expression           : 11 26 30 38 42 48 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 72 73
fundef               : 76 77
fundefs              : 74 76
fundefs_opt          : 4
init                 : 9 10
inits                : 7 9
instruction          : 14 15 29 31 32 33 33 34 34 35 36
instructions         : 12 14 37
instructions_opt     : 4 41
labeled_instr        : 17
print_instr          : 16
program              : 0
repeat_instr         : 21
return_instr         : 22
while_instr          : 20

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . elements
    (2) elements -> . elements element
    (3) elements -> .

    TYPE            reduce using rule 3 (elements -> .)
    error           reduce using rule 3 (elements -> .)
    PRINT           reduce using rule 3 (elements -> .)
    ID              reduce using rule 3 (elements -> .)
    IF              reduce using rule 3 (elements -> .)
    WHILE           reduce using rule 3 (elements -> .)
    REPEAT          reduce using rule 3 (elements -> .)
    RETURN          reduce using rule 3 (elements -> .)
    BREAK           reduce using rule 3 (elements -> .)
    CONTINUE        reduce using rule 3 (elements -> .)
    {               reduce using rule 3 (elements -> .)
    (               reduce using rule 3 (elements -> .)
    INTEGER         reduce using rule 3 (elements -> .)
    FLOAT           reduce using rule 3 (elements -> .)
    STRING          reduce using rule 3 (elements -> .)
    $end            reduce using rule 3 (elements -> .)

    program                        shift and go to state 1
    elements                       shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> elements .
    (2) elements -> elements . element
    (4) element -> . declarations fundefs_opt instructions_opt
    (5) declarations -> . declarations declaration
    (6) declarations -> .

  ! reduce/reduce conflict for $end resolved using rule 1 (program -> elements .)
    $end            reduce using rule 1 (program -> elements .)
    TYPE            reduce using rule 6 (declarations -> .)
    error           reduce using rule 6 (declarations -> .)
    PRINT           reduce using rule 6 (declarations -> .)
    ID              reduce using rule 6 (declarations -> .)
    IF              reduce using rule 6 (declarations -> .)
    WHILE           reduce using rule 6 (declarations -> .)
    REPEAT          reduce using rule 6 (declarations -> .)
    RETURN          reduce using rule 6 (declarations -> .)
    BREAK           reduce using rule 6 (declarations -> .)
    CONTINUE        reduce using rule 6 (declarations -> .)
    {               reduce using rule 6 (declarations -> .)
    (               reduce using rule 6 (declarations -> .)
    INTEGER         reduce using rule 6 (declarations -> .)
    FLOAT           reduce using rule 6 (declarations -> .)
    STRING          reduce using rule 6 (declarations -> .)

  ! $end            [ reduce using rule 6 (declarations -> .) ]

    declarations                   shift and go to state 3
    element                        shift and go to state 4

state 3

    (4) element -> declarations . fundefs_opt instructions_opt
    (5) declarations -> declarations . declaration
    (74) fundefs_opt -> . fundefs
    (75) fundefs_opt -> .
    (7) declaration -> . TYPE inits ;
    (8) declaration -> . error ;
    (76) fundefs -> . fundefs fundef
    (77) fundefs -> . fundef
    (78) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr

  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for error resolved as shift
    PRINT           reduce using rule 75 (fundefs_opt -> .)
    ID              reduce using rule 75 (fundefs_opt -> .)
    IF              reduce using rule 75 (fundefs_opt -> .)
    WHILE           reduce using rule 75 (fundefs_opt -> .)
    REPEAT          reduce using rule 75 (fundefs_opt -> .)
    RETURN          reduce using rule 75 (fundefs_opt -> .)
    BREAK           reduce using rule 75 (fundefs_opt -> .)
    CONTINUE        reduce using rule 75 (fundefs_opt -> .)
    {               reduce using rule 75 (fundefs_opt -> .)
    (               reduce using rule 75 (fundefs_opt -> .)
    INTEGER         reduce using rule 75 (fundefs_opt -> .)
    FLOAT           reduce using rule 75 (fundefs_opt -> .)
    STRING          reduce using rule 75 (fundefs_opt -> .)
    $end            reduce using rule 75 (fundefs_opt -> .)
    TYPE            shift and go to state 10
    error           shift and go to state 5

  ! TYPE            [ reduce using rule 75 (fundefs_opt -> .) ]
  ! error           [ reduce using rule 75 (fundefs_opt -> .) ]

    fundefs                        shift and go to state 6
    fundef                         shift and go to state 7
    fundefs_opt                    shift and go to state 8
    declaration                    shift and go to state 9

state 4

    (2) elements -> elements element .

    TYPE            reduce using rule 2 (elements -> elements element .)
    error           reduce using rule 2 (elements -> elements element .)
    PRINT           reduce using rule 2 (elements -> elements element .)
    ID              reduce using rule 2 (elements -> elements element .)
    IF              reduce using rule 2 (elements -> elements element .)
    WHILE           reduce using rule 2 (elements -> elements element .)
    REPEAT          reduce using rule 2 (elements -> elements element .)
    RETURN          reduce using rule 2 (elements -> elements element .)
    BREAK           reduce using rule 2 (elements -> elements element .)
    CONTINUE        reduce using rule 2 (elements -> elements element .)
    {               reduce using rule 2 (elements -> elements element .)
    (               reduce using rule 2 (elements -> elements element .)
    INTEGER         reduce using rule 2 (elements -> elements element .)
    FLOAT           reduce using rule 2 (elements -> elements element .)
    STRING          reduce using rule 2 (elements -> elements element .)
    $end            reduce using rule 2 (elements -> elements element .)


state 5

    (8) declaration -> error . ;

    ;               shift and go to state 11


state 6

    (74) fundefs_opt -> fundefs .
    (76) fundefs -> fundefs . fundef
    (78) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr

  ! shift/reduce conflict for TYPE resolved as shift
    PRINT           reduce using rule 74 (fundefs_opt -> fundefs .)
    ID              reduce using rule 74 (fundefs_opt -> fundefs .)
    IF              reduce using rule 74 (fundefs_opt -> fundefs .)
    WHILE           reduce using rule 74 (fundefs_opt -> fundefs .)
    REPEAT          reduce using rule 74 (fundefs_opt -> fundefs .)
    RETURN          reduce using rule 74 (fundefs_opt -> fundefs .)
    BREAK           reduce using rule 74 (fundefs_opt -> fundefs .)
    CONTINUE        reduce using rule 74 (fundefs_opt -> fundefs .)
    {               reduce using rule 74 (fundefs_opt -> fundefs .)
    (               reduce using rule 74 (fundefs_opt -> fundefs .)
    INTEGER         reduce using rule 74 (fundefs_opt -> fundefs .)
    FLOAT           reduce using rule 74 (fundefs_opt -> fundefs .)
    STRING          reduce using rule 74 (fundefs_opt -> fundefs .)
    error           reduce using rule 74 (fundefs_opt -> fundefs .)
    $end            reduce using rule 74 (fundefs_opt -> fundefs .)
    TYPE            shift and go to state 13

  ! TYPE            [ reduce using rule 74 (fundefs_opt -> fundefs .) ]

    fundef                         shift and go to state 12

state 7

    (77) fundefs -> fundef .

    TYPE            reduce using rule 77 (fundefs -> fundef .)
    PRINT           reduce using rule 77 (fundefs -> fundef .)
    ID              reduce using rule 77 (fundefs -> fundef .)
    IF              reduce using rule 77 (fundefs -> fundef .)
    WHILE           reduce using rule 77 (fundefs -> fundef .)
    REPEAT          reduce using rule 77 (fundefs -> fundef .)
    RETURN          reduce using rule 77 (fundefs -> fundef .)
    BREAK           reduce using rule 77 (fundefs -> fundef .)
    CONTINUE        reduce using rule 77 (fundefs -> fundef .)
    {               reduce using rule 77 (fundefs -> fundef .)
    (               reduce using rule 77 (fundefs -> fundef .)
    INTEGER         reduce using rule 77 (fundefs -> fundef .)
    FLOAT           reduce using rule 77 (fundefs -> fundef .)
    STRING          reduce using rule 77 (fundefs -> fundef .)
    error           reduce using rule 77 (fundefs -> fundef .)
    $end            reduce using rule 77 (fundefs -> fundef .)


state 8

    (4) element -> declarations fundefs_opt . instructions_opt
    (12) instructions_opt -> . instructions
    (13) instructions_opt -> .
    (14) instructions -> . instructions instruction
    (15) instructions -> . instruction
    (16) instruction -> . print_instr
    (17) instruction -> . labeled_instr
    (18) instruction -> . assignment
    (19) instruction -> . choice_instr
    (20) instruction -> . while_instr
    (21) instruction -> . repeat_instr
    (22) instruction -> . return_instr
    (23) instruction -> . break_instr
    (24) instruction -> . continue_instr
    (25) instruction -> . compound_instr
    (26) instruction -> . expression ;
    (27) print_instr -> . PRINT expr_list ;
    (28) print_instr -> . PRINT error ;
    (29) labeled_instr -> . ID : instruction
    (30) assignment -> . ID = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions_opt }
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    TYPE            reduce using rule 13 (instructions_opt -> .)
    error           reduce using rule 13 (instructions_opt -> .)
    $end            reduce using rule 13 (instructions_opt -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 32
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    REPEAT          shift and go to state 25
    RETURN          shift and go to state 14
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 39
    {               shift and go to state 40
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

  ! PRINT           [ reduce using rule 13 (instructions_opt -> .) ]
  ! ID              [ reduce using rule 13 (instructions_opt -> .) ]
  ! IF              [ reduce using rule 13 (instructions_opt -> .) ]
  ! WHILE           [ reduce using rule 13 (instructions_opt -> .) ]
  ! REPEAT          [ reduce using rule 13 (instructions_opt -> .) ]
  ! RETURN          [ reduce using rule 13 (instructions_opt -> .) ]
  ! BREAK           [ reduce using rule 13 (instructions_opt -> .) ]
  ! CONTINUE        [ reduce using rule 13 (instructions_opt -> .) ]
  ! {               [ reduce using rule 13 (instructions_opt -> .) ]
  ! (               [ reduce using rule 13 (instructions_opt -> .) ]
  ! INTEGER         [ reduce using rule 13 (instructions_opt -> .) ]
  ! FLOAT           [ reduce using rule 13 (instructions_opt -> .) ]
  ! STRING          [ reduce using rule 13 (instructions_opt -> .) ]

    return_instr                   shift and go to state 20
    instruction                    shift and go to state 36
    const                          shift and go to state 21
    print_instr                    shift and go to state 38
    assignment                     shift and go to state 27
    compound_instr                 shift and go to state 30
    choice_instr                   shift and go to state 15
    continue_instr                 shift and go to state 23
    labeled_instr                  shift and go to state 28
    instructions_opt               shift and go to state 29
    break_instr                    shift and go to state 35
    while_instr                    shift and go to state 24
    expression                     shift and go to state 41
    repeat_instr                   shift and go to state 19
    instructions                   shift and go to state 33

state 9

    (5) declarations -> declarations declaration .

    TYPE            reduce using rule 5 (declarations -> declarations declaration .)
    error           reduce using rule 5 (declarations -> declarations declaration .)
    PRINT           reduce using rule 5 (declarations -> declarations declaration .)
    ID              reduce using rule 5 (declarations -> declarations declaration .)
    IF              reduce using rule 5 (declarations -> declarations declaration .)
    WHILE           reduce using rule 5 (declarations -> declarations declaration .)
    REPEAT          reduce using rule 5 (declarations -> declarations declaration .)
    RETURN          reduce using rule 5 (declarations -> declarations declaration .)
    BREAK           reduce using rule 5 (declarations -> declarations declaration .)
    CONTINUE        reduce using rule 5 (declarations -> declarations declaration .)
    {               reduce using rule 5 (declarations -> declarations declaration .)
    (               reduce using rule 5 (declarations -> declarations declaration .)
    INTEGER         reduce using rule 5 (declarations -> declarations declaration .)
    FLOAT           reduce using rule 5 (declarations -> declarations declaration .)
    STRING          reduce using rule 5 (declarations -> declarations declaration .)
    $end            reduce using rule 5 (declarations -> declarations declaration .)
    }               reduce using rule 5 (declarations -> declarations declaration .)


state 10

    (7) declaration -> TYPE . inits ;
    (78) fundef -> TYPE . ID ( args_list_or_empty ) compound_instr
    (9) inits -> . inits , init
    (10) inits -> . init
    (11) init -> . ID = expression

    ID              shift and go to state 44

    init                           shift and go to state 42
    inits                          shift and go to state 43

state 11

    (8) declaration -> error ; .

    TYPE            reduce using rule 8 (declaration -> error ; .)
    error           reduce using rule 8 (declaration -> error ; .)
    PRINT           reduce using rule 8 (declaration -> error ; .)
    ID              reduce using rule 8 (declaration -> error ; .)
    IF              reduce using rule 8 (declaration -> error ; .)
    WHILE           reduce using rule 8 (declaration -> error ; .)
    REPEAT          reduce using rule 8 (declaration -> error ; .)
    RETURN          reduce using rule 8 (declaration -> error ; .)
    BREAK           reduce using rule 8 (declaration -> error ; .)
    CONTINUE        reduce using rule 8 (declaration -> error ; .)
    {               reduce using rule 8 (declaration -> error ; .)
    (               reduce using rule 8 (declaration -> error ; .)
    INTEGER         reduce using rule 8 (declaration -> error ; .)
    FLOAT           reduce using rule 8 (declaration -> error ; .)
    STRING          reduce using rule 8 (declaration -> error ; .)
    $end            reduce using rule 8 (declaration -> error ; .)
    }               reduce using rule 8 (declaration -> error ; .)


state 12

    (76) fundefs -> fundefs fundef .

    TYPE            reduce using rule 76 (fundefs -> fundefs fundef .)
    PRINT           reduce using rule 76 (fundefs -> fundefs fundef .)
    ID              reduce using rule 76 (fundefs -> fundefs fundef .)
    IF              reduce using rule 76 (fundefs -> fundefs fundef .)
    WHILE           reduce using rule 76 (fundefs -> fundefs fundef .)
    REPEAT          reduce using rule 76 (fundefs -> fundefs fundef .)
    RETURN          reduce using rule 76 (fundefs -> fundefs fundef .)
    BREAK           reduce using rule 76 (fundefs -> fundefs fundef .)
    CONTINUE        reduce using rule 76 (fundefs -> fundefs fundef .)
    {               reduce using rule 76 (fundefs -> fundefs fundef .)
    (               reduce using rule 76 (fundefs -> fundefs fundef .)
    INTEGER         reduce using rule 76 (fundefs -> fundefs fundef .)
    FLOAT           reduce using rule 76 (fundefs -> fundefs fundef .)
    STRING          reduce using rule 76 (fundefs -> fundefs fundef .)
    error           reduce using rule 76 (fundefs -> fundefs fundef .)
    $end            reduce using rule 76 (fundefs -> fundefs fundef .)


state 13

    (78) fundef -> TYPE . ID ( args_list_or_empty ) compound_instr

    ID              shift and go to state 45


state 14

    (38) return_instr -> RETURN . expression ;
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 47

state 15

    (19) instruction -> choice_instr .

    PRINT           reduce using rule 19 (instruction -> choice_instr .)
    ID              reduce using rule 19 (instruction -> choice_instr .)
    IF              reduce using rule 19 (instruction -> choice_instr .)
    WHILE           reduce using rule 19 (instruction -> choice_instr .)
    REPEAT          reduce using rule 19 (instruction -> choice_instr .)
    RETURN          reduce using rule 19 (instruction -> choice_instr .)
    BREAK           reduce using rule 19 (instruction -> choice_instr .)
    CONTINUE        reduce using rule 19 (instruction -> choice_instr .)
    {               reduce using rule 19 (instruction -> choice_instr .)
    (               reduce using rule 19 (instruction -> choice_instr .)
    INTEGER         reduce using rule 19 (instruction -> choice_instr .)
    FLOAT           reduce using rule 19 (instruction -> choice_instr .)
    STRING          reduce using rule 19 (instruction -> choice_instr .)
    TYPE            reduce using rule 19 (instruction -> choice_instr .)
    error           reduce using rule 19 (instruction -> choice_instr .)
    $end            reduce using rule 19 (instruction -> choice_instr .)
    UNTIL           reduce using rule 19 (instruction -> choice_instr .)
    }               reduce using rule 19 (instruction -> choice_instr .)
    ELSE            reduce using rule 19 (instruction -> choice_instr .)


state 16

    (31) choice_instr -> IF . ( condition ) instruction
    (32) choice_instr -> IF . ( error ) instruction
    (33) choice_instr -> IF . ( condition ) instruction ELSE instruction
    (34) choice_instr -> IF . ( error ) instruction ELSE instruction

    (               shift and go to state 48


state 17

    (27) print_instr -> PRINT . expr_list ;
    (28) print_instr -> PRINT . error ;
    (72) expr_list -> . expr_list , expression
    (73) expr_list -> . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    error           shift and go to state 50
    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    expr_list                      shift and go to state 49
    expression                     shift and go to state 51
    const                          shift and go to state 21

state 18

    (35) while_instr -> WHILE . ( condition ) instruction
    (36) while_instr -> WHILE . ( error ) instruction

    (               shift and go to state 52


state 19

    (21) instruction -> repeat_instr .

    PRINT           reduce using rule 21 (instruction -> repeat_instr .)
    ID              reduce using rule 21 (instruction -> repeat_instr .)
    IF              reduce using rule 21 (instruction -> repeat_instr .)
    WHILE           reduce using rule 21 (instruction -> repeat_instr .)
    REPEAT          reduce using rule 21 (instruction -> repeat_instr .)
    RETURN          reduce using rule 21 (instruction -> repeat_instr .)
    BREAK           reduce using rule 21 (instruction -> repeat_instr .)
    CONTINUE        reduce using rule 21 (instruction -> repeat_instr .)
    {               reduce using rule 21 (instruction -> repeat_instr .)
    (               reduce using rule 21 (instruction -> repeat_instr .)
    INTEGER         reduce using rule 21 (instruction -> repeat_instr .)
    FLOAT           reduce using rule 21 (instruction -> repeat_instr .)
    STRING          reduce using rule 21 (instruction -> repeat_instr .)
    TYPE            reduce using rule 21 (instruction -> repeat_instr .)
    error           reduce using rule 21 (instruction -> repeat_instr .)
    $end            reduce using rule 21 (instruction -> repeat_instr .)
    UNTIL           reduce using rule 21 (instruction -> repeat_instr .)
    }               reduce using rule 21 (instruction -> repeat_instr .)
    ELSE            reduce using rule 21 (instruction -> repeat_instr .)


state 20

    (22) instruction -> return_instr .

    PRINT           reduce using rule 22 (instruction -> return_instr .)
    ID              reduce using rule 22 (instruction -> return_instr .)
    IF              reduce using rule 22 (instruction -> return_instr .)
    WHILE           reduce using rule 22 (instruction -> return_instr .)
    REPEAT          reduce using rule 22 (instruction -> return_instr .)
    RETURN          reduce using rule 22 (instruction -> return_instr .)
    BREAK           reduce using rule 22 (instruction -> return_instr .)
    CONTINUE        reduce using rule 22 (instruction -> return_instr .)
    {               reduce using rule 22 (instruction -> return_instr .)
    (               reduce using rule 22 (instruction -> return_instr .)
    INTEGER         reduce using rule 22 (instruction -> return_instr .)
    FLOAT           reduce using rule 22 (instruction -> return_instr .)
    STRING          reduce using rule 22 (instruction -> return_instr .)
    TYPE            reduce using rule 22 (instruction -> return_instr .)
    error           reduce using rule 22 (instruction -> return_instr .)
    $end            reduce using rule 22 (instruction -> return_instr .)
    UNTIL           reduce using rule 22 (instruction -> return_instr .)
    }               reduce using rule 22 (instruction -> return_instr .)
    ELSE            reduce using rule 22 (instruction -> return_instr .)


state 21

    (46) expression -> const .

    +               reduce using rule 46 (expression -> const .)
    -               reduce using rule 46 (expression -> const .)
    *               reduce using rule 46 (expression -> const .)
    /               reduce using rule 46 (expression -> const .)
    %               reduce using rule 46 (expression -> const .)
    |               reduce using rule 46 (expression -> const .)
    &               reduce using rule 46 (expression -> const .)
    ^               reduce using rule 46 (expression -> const .)
    AND             reduce using rule 46 (expression -> const .)
    OR              reduce using rule 46 (expression -> const .)
    SHL             reduce using rule 46 (expression -> const .)
    SHR             reduce using rule 46 (expression -> const .)
    EQ              reduce using rule 46 (expression -> const .)
    NEQ             reduce using rule 46 (expression -> const .)
    >               reduce using rule 46 (expression -> const .)
    <               reduce using rule 46 (expression -> const .)
    LE              reduce using rule 46 (expression -> const .)
    GE              reduce using rule 46 (expression -> const .)
    ;               reduce using rule 46 (expression -> const .)
    ,               reduce using rule 46 (expression -> const .)
    )               reduce using rule 46 (expression -> const .)


state 22

    (48) expression -> ( . expression )
    (49) expression -> ( . error )
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    error           shift and go to state 53
    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 54

state 23

    (24) instruction -> continue_instr .

    PRINT           reduce using rule 24 (instruction -> continue_instr .)
    ID              reduce using rule 24 (instruction -> continue_instr .)
    IF              reduce using rule 24 (instruction -> continue_instr .)
    WHILE           reduce using rule 24 (instruction -> continue_instr .)
    REPEAT          reduce using rule 24 (instruction -> continue_instr .)
    RETURN          reduce using rule 24 (instruction -> continue_instr .)
    BREAK           reduce using rule 24 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 24 (instruction -> continue_instr .)
    {               reduce using rule 24 (instruction -> continue_instr .)
    (               reduce using rule 24 (instruction -> continue_instr .)
    INTEGER         reduce using rule 24 (instruction -> continue_instr .)
    FLOAT           reduce using rule 24 (instruction -> continue_instr .)
    STRING          reduce using rule 24 (instruction -> continue_instr .)
    TYPE            reduce using rule 24 (instruction -> continue_instr .)
    error           reduce using rule 24 (instruction -> continue_instr .)
    $end            reduce using rule 24 (instruction -> continue_instr .)
    UNTIL           reduce using rule 24 (instruction -> continue_instr .)
    }               reduce using rule 24 (instruction -> continue_instr .)
    ELSE            reduce using rule 24 (instruction -> continue_instr .)


state 24

    (20) instruction -> while_instr .

    PRINT           reduce using rule 20 (instruction -> while_instr .)
    ID              reduce using rule 20 (instruction -> while_instr .)
    IF              reduce using rule 20 (instruction -> while_instr .)
    WHILE           reduce using rule 20 (instruction -> while_instr .)
    REPEAT          reduce using rule 20 (instruction -> while_instr .)
    RETURN          reduce using rule 20 (instruction -> while_instr .)
    BREAK           reduce using rule 20 (instruction -> while_instr .)
    CONTINUE        reduce using rule 20 (instruction -> while_instr .)
    {               reduce using rule 20 (instruction -> while_instr .)
    (               reduce using rule 20 (instruction -> while_instr .)
    INTEGER         reduce using rule 20 (instruction -> while_instr .)
    FLOAT           reduce using rule 20 (instruction -> while_instr .)
    STRING          reduce using rule 20 (instruction -> while_instr .)
    TYPE            reduce using rule 20 (instruction -> while_instr .)
    error           reduce using rule 20 (instruction -> while_instr .)
    $end            reduce using rule 20 (instruction -> while_instr .)
    UNTIL           reduce using rule 20 (instruction -> while_instr .)
    }               reduce using rule 20 (instruction -> while_instr .)
    ELSE            reduce using rule 20 (instruction -> while_instr .)


state 25

    (37) repeat_instr -> REPEAT . instructions UNTIL condition ;
    (14) instructions -> . instructions instruction
    (15) instructions -> . instruction
    (16) instruction -> . print_instr
    (17) instruction -> . labeled_instr
    (18) instruction -> . assignment
    (19) instruction -> . choice_instr
    (20) instruction -> . while_instr
    (21) instruction -> . repeat_instr
    (22) instruction -> . return_instr
    (23) instruction -> . break_instr
    (24) instruction -> . continue_instr
    (25) instruction -> . compound_instr
    (26) instruction -> . expression ;
    (27) print_instr -> . PRINT expr_list ;
    (28) print_instr -> . PRINT error ;
    (29) labeled_instr -> . ID : instruction
    (30) assignment -> . ID = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions_opt }
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    PRINT           shift and go to state 17
    ID              shift and go to state 32
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    REPEAT          shift and go to state 25
    RETURN          shift and go to state 14
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 39
    {               shift and go to state 40
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    return_instr                   shift and go to state 20
    const                          shift and go to state 21
    assignment                     shift and go to state 27
    instruction                    shift and go to state 36
    compound_instr                 shift and go to state 30
    continue_instr                 shift and go to state 23
    labeled_instr                  shift and go to state 28
    print_instr                    shift and go to state 38
    choice_instr                   shift and go to state 15
    repeat_instr                   shift and go to state 19
    break_instr                    shift and go to state 35
    while_instr                    shift and go to state 24
    expression                     shift and go to state 41
    instructions                   shift and go to state 55

state 26

    (45) const -> STRING .

    ;               reduce using rule 45 (const -> STRING .)
    +               reduce using rule 45 (const -> STRING .)
    -               reduce using rule 45 (const -> STRING .)
    *               reduce using rule 45 (const -> STRING .)
    /               reduce using rule 45 (const -> STRING .)
    %               reduce using rule 45 (const -> STRING .)
    |               reduce using rule 45 (const -> STRING .)
    &               reduce using rule 45 (const -> STRING .)
    ^               reduce using rule 45 (const -> STRING .)
    AND             reduce using rule 45 (const -> STRING .)
    OR              reduce using rule 45 (const -> STRING .)
    SHL             reduce using rule 45 (const -> STRING .)
    SHR             reduce using rule 45 (const -> STRING .)
    EQ              reduce using rule 45 (const -> STRING .)
    NEQ             reduce using rule 45 (const -> STRING .)
    >               reduce using rule 45 (const -> STRING .)
    <               reduce using rule 45 (const -> STRING .)
    LE              reduce using rule 45 (const -> STRING .)
    GE              reduce using rule 45 (const -> STRING .)
    ,               reduce using rule 45 (const -> STRING .)
    )               reduce using rule 45 (const -> STRING .)


state 27

    (18) instruction -> assignment .

    PRINT           reduce using rule 18 (instruction -> assignment .)
    ID              reduce using rule 18 (instruction -> assignment .)
    IF              reduce using rule 18 (instruction -> assignment .)
    WHILE           reduce using rule 18 (instruction -> assignment .)
    REPEAT          reduce using rule 18 (instruction -> assignment .)
    RETURN          reduce using rule 18 (instruction -> assignment .)
    BREAK           reduce using rule 18 (instruction -> assignment .)
    CONTINUE        reduce using rule 18 (instruction -> assignment .)
    {               reduce using rule 18 (instruction -> assignment .)
    (               reduce using rule 18 (instruction -> assignment .)
    INTEGER         reduce using rule 18 (instruction -> assignment .)
    FLOAT           reduce using rule 18 (instruction -> assignment .)
    STRING          reduce using rule 18 (instruction -> assignment .)
    TYPE            reduce using rule 18 (instruction -> assignment .)
    error           reduce using rule 18 (instruction -> assignment .)
    $end            reduce using rule 18 (instruction -> assignment .)
    UNTIL           reduce using rule 18 (instruction -> assignment .)
    }               reduce using rule 18 (instruction -> assignment .)
    ELSE            reduce using rule 18 (instruction -> assignment .)


state 28

    (17) instruction -> labeled_instr .

    PRINT           reduce using rule 17 (instruction -> labeled_instr .)
    ID              reduce using rule 17 (instruction -> labeled_instr .)
    IF              reduce using rule 17 (instruction -> labeled_instr .)
    WHILE           reduce using rule 17 (instruction -> labeled_instr .)
    REPEAT          reduce using rule 17 (instruction -> labeled_instr .)
    RETURN          reduce using rule 17 (instruction -> labeled_instr .)
    BREAK           reduce using rule 17 (instruction -> labeled_instr .)
    CONTINUE        reduce using rule 17 (instruction -> labeled_instr .)
    {               reduce using rule 17 (instruction -> labeled_instr .)
    (               reduce using rule 17 (instruction -> labeled_instr .)
    INTEGER         reduce using rule 17 (instruction -> labeled_instr .)
    FLOAT           reduce using rule 17 (instruction -> labeled_instr .)
    STRING          reduce using rule 17 (instruction -> labeled_instr .)
    TYPE            reduce using rule 17 (instruction -> labeled_instr .)
    error           reduce using rule 17 (instruction -> labeled_instr .)
    $end            reduce using rule 17 (instruction -> labeled_instr .)
    UNTIL           reduce using rule 17 (instruction -> labeled_instr .)
    }               reduce using rule 17 (instruction -> labeled_instr .)
    ELSE            reduce using rule 17 (instruction -> labeled_instr .)


state 29

    (4) element -> declarations fundefs_opt instructions_opt .

    TYPE            reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    error           reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    PRINT           reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    ID              reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    IF              reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    WHILE           reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    REPEAT          reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    RETURN          reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    BREAK           reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    CONTINUE        reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    {               reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    (               reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    INTEGER         reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    FLOAT           reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    STRING          reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)
    $end            reduce using rule 4 (element -> declarations fundefs_opt instructions_opt .)


state 30

    (25) instruction -> compound_instr .

    PRINT           reduce using rule 25 (instruction -> compound_instr .)
    ID              reduce using rule 25 (instruction -> compound_instr .)
    IF              reduce using rule 25 (instruction -> compound_instr .)
    WHILE           reduce using rule 25 (instruction -> compound_instr .)
    REPEAT          reduce using rule 25 (instruction -> compound_instr .)
    RETURN          reduce using rule 25 (instruction -> compound_instr .)
    BREAK           reduce using rule 25 (instruction -> compound_instr .)
    CONTINUE        reduce using rule 25 (instruction -> compound_instr .)
    {               reduce using rule 25 (instruction -> compound_instr .)
    (               reduce using rule 25 (instruction -> compound_instr .)
    INTEGER         reduce using rule 25 (instruction -> compound_instr .)
    FLOAT           reduce using rule 25 (instruction -> compound_instr .)
    STRING          reduce using rule 25 (instruction -> compound_instr .)
    TYPE            reduce using rule 25 (instruction -> compound_instr .)
    error           reduce using rule 25 (instruction -> compound_instr .)
    $end            reduce using rule 25 (instruction -> compound_instr .)
    UNTIL           reduce using rule 25 (instruction -> compound_instr .)
    }               reduce using rule 25 (instruction -> compound_instr .)
    ELSE            reduce using rule 25 (instruction -> compound_instr .)


state 31

    (43) const -> INTEGER .

    ;               reduce using rule 43 (const -> INTEGER .)
    +               reduce using rule 43 (const -> INTEGER .)
    -               reduce using rule 43 (const -> INTEGER .)
    *               reduce using rule 43 (const -> INTEGER .)
    /               reduce using rule 43 (const -> INTEGER .)
    %               reduce using rule 43 (const -> INTEGER .)
    |               reduce using rule 43 (const -> INTEGER .)
    &               reduce using rule 43 (const -> INTEGER .)
    ^               reduce using rule 43 (const -> INTEGER .)
    AND             reduce using rule 43 (const -> INTEGER .)
    OR              reduce using rule 43 (const -> INTEGER .)
    SHL             reduce using rule 43 (const -> INTEGER .)
    SHR             reduce using rule 43 (const -> INTEGER .)
    EQ              reduce using rule 43 (const -> INTEGER .)
    NEQ             reduce using rule 43 (const -> INTEGER .)
    >               reduce using rule 43 (const -> INTEGER .)
    <               reduce using rule 43 (const -> INTEGER .)
    LE              reduce using rule 43 (const -> INTEGER .)
    GE              reduce using rule 43 (const -> INTEGER .)
    ,               reduce using rule 43 (const -> INTEGER .)
    )               reduce using rule 43 (const -> INTEGER .)


state 32

    (29) labeled_instr -> ID . : instruction
    (30) assignment -> ID . = expression ;
    (47) expression -> ID .
    (50) expression -> ID . ( expr_list_or_empty )
    (51) expression -> ID . ( error )

    :               shift and go to state 57
    =               shift and go to state 58
    ;               reduce using rule 47 (expression -> ID .)
    +               reduce using rule 47 (expression -> ID .)
    -               reduce using rule 47 (expression -> ID .)
    *               reduce using rule 47 (expression -> ID .)
    /               reduce using rule 47 (expression -> ID .)
    %               reduce using rule 47 (expression -> ID .)
    |               reduce using rule 47 (expression -> ID .)
    &               reduce using rule 47 (expression -> ID .)
    ^               reduce using rule 47 (expression -> ID .)
    AND             reduce using rule 47 (expression -> ID .)
    OR              reduce using rule 47 (expression -> ID .)
    SHL             reduce using rule 47 (expression -> ID .)
    SHR             reduce using rule 47 (expression -> ID .)
    EQ              reduce using rule 47 (expression -> ID .)
    NEQ             reduce using rule 47 (expression -> ID .)
    >               reduce using rule 47 (expression -> ID .)
    <               reduce using rule 47 (expression -> ID .)
    LE              reduce using rule 47 (expression -> ID .)
    GE              reduce using rule 47 (expression -> ID .)
    (               shift and go to state 56


state 33

    (12) instructions_opt -> instructions .
    (14) instructions -> instructions . instruction
    (16) instruction -> . print_instr
    (17) instruction -> . labeled_instr
    (18) instruction -> . assignment
    (19) instruction -> . choice_instr
    (20) instruction -> . while_instr
    (21) instruction -> . repeat_instr
    (22) instruction -> . return_instr
    (23) instruction -> . break_instr
    (24) instruction -> . continue_instr
    (25) instruction -> . compound_instr
    (26) instruction -> . expression ;
    (27) print_instr -> . PRINT expr_list ;
    (28) print_instr -> . PRINT error ;
    (29) labeled_instr -> . ID : instruction
    (30) assignment -> . ID = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions_opt }
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    }               reduce using rule 12 (instructions_opt -> instructions .)
    TYPE            reduce using rule 12 (instructions_opt -> instructions .)
    error           reduce using rule 12 (instructions_opt -> instructions .)
    $end            reduce using rule 12 (instructions_opt -> instructions .)
    PRINT           shift and go to state 17
    ID              shift and go to state 32
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    REPEAT          shift and go to state 25
    RETURN          shift and go to state 14
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 39
    {               shift and go to state 40
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

  ! PRINT           [ reduce using rule 12 (instructions_opt -> instructions .) ]
  ! ID              [ reduce using rule 12 (instructions_opt -> instructions .) ]
  ! IF              [ reduce using rule 12 (instructions_opt -> instructions .) ]
  ! WHILE           [ reduce using rule 12 (instructions_opt -> instructions .) ]
  ! REPEAT          [ reduce using rule 12 (instructions_opt -> instructions .) ]
  ! RETURN          [ reduce using rule 12 (instructions_opt -> instructions .) ]
  ! BREAK           [ reduce using rule 12 (instructions_opt -> instructions .) ]
  ! CONTINUE        [ reduce using rule 12 (instructions_opt -> instructions .) ]
  ! {               [ reduce using rule 12 (instructions_opt -> instructions .) ]
  ! (               [ reduce using rule 12 (instructions_opt -> instructions .) ]
  ! INTEGER         [ reduce using rule 12 (instructions_opt -> instructions .) ]
  ! FLOAT           [ reduce using rule 12 (instructions_opt -> instructions .) ]
  ! STRING          [ reduce using rule 12 (instructions_opt -> instructions .) ]

    return_instr                   shift and go to state 20
    const                          shift and go to state 21
    assignment                     shift and go to state 27
    instruction                    shift and go to state 59
    compound_instr                 shift and go to state 30
    continue_instr                 shift and go to state 23
    labeled_instr                  shift and go to state 28
    print_instr                    shift and go to state 38
    choice_instr                   shift and go to state 15
    break_instr                    shift and go to state 35
    while_instr                    shift and go to state 24
    expression                     shift and go to state 41
    repeat_instr                   shift and go to state 19

state 34

    (44) const -> FLOAT .

    ;               reduce using rule 44 (const -> FLOAT .)
    +               reduce using rule 44 (const -> FLOAT .)
    -               reduce using rule 44 (const -> FLOAT .)
    *               reduce using rule 44 (const -> FLOAT .)
    /               reduce using rule 44 (const -> FLOAT .)
    %               reduce using rule 44 (const -> FLOAT .)
    |               reduce using rule 44 (const -> FLOAT .)
    &               reduce using rule 44 (const -> FLOAT .)
    ^               reduce using rule 44 (const -> FLOAT .)
    AND             reduce using rule 44 (const -> FLOAT .)
    OR              reduce using rule 44 (const -> FLOAT .)
    SHL             reduce using rule 44 (const -> FLOAT .)
    SHR             reduce using rule 44 (const -> FLOAT .)
    EQ              reduce using rule 44 (const -> FLOAT .)
    NEQ             reduce using rule 44 (const -> FLOAT .)
    >               reduce using rule 44 (const -> FLOAT .)
    <               reduce using rule 44 (const -> FLOAT .)
    LE              reduce using rule 44 (const -> FLOAT .)
    GE              reduce using rule 44 (const -> FLOAT .)
    ,               reduce using rule 44 (const -> FLOAT .)
    )               reduce using rule 44 (const -> FLOAT .)


state 35

    (23) instruction -> break_instr .

    PRINT           reduce using rule 23 (instruction -> break_instr .)
    ID              reduce using rule 23 (instruction -> break_instr .)
    IF              reduce using rule 23 (instruction -> break_instr .)
    WHILE           reduce using rule 23 (instruction -> break_instr .)
    REPEAT          reduce using rule 23 (instruction -> break_instr .)
    RETURN          reduce using rule 23 (instruction -> break_instr .)
    BREAK           reduce using rule 23 (instruction -> break_instr .)
    CONTINUE        reduce using rule 23 (instruction -> break_instr .)
    {               reduce using rule 23 (instruction -> break_instr .)
    (               reduce using rule 23 (instruction -> break_instr .)
    INTEGER         reduce using rule 23 (instruction -> break_instr .)
    FLOAT           reduce using rule 23 (instruction -> break_instr .)
    STRING          reduce using rule 23 (instruction -> break_instr .)
    TYPE            reduce using rule 23 (instruction -> break_instr .)
    error           reduce using rule 23 (instruction -> break_instr .)
    $end            reduce using rule 23 (instruction -> break_instr .)
    UNTIL           reduce using rule 23 (instruction -> break_instr .)
    }               reduce using rule 23 (instruction -> break_instr .)
    ELSE            reduce using rule 23 (instruction -> break_instr .)


state 36

    (15) instructions -> instruction .

    UNTIL           reduce using rule 15 (instructions -> instruction .)
    PRINT           reduce using rule 15 (instructions -> instruction .)
    ID              reduce using rule 15 (instructions -> instruction .)
    IF              reduce using rule 15 (instructions -> instruction .)
    WHILE           reduce using rule 15 (instructions -> instruction .)
    REPEAT          reduce using rule 15 (instructions -> instruction .)
    RETURN          reduce using rule 15 (instructions -> instruction .)
    BREAK           reduce using rule 15 (instructions -> instruction .)
    CONTINUE        reduce using rule 15 (instructions -> instruction .)
    {               reduce using rule 15 (instructions -> instruction .)
    (               reduce using rule 15 (instructions -> instruction .)
    INTEGER         reduce using rule 15 (instructions -> instruction .)
    FLOAT           reduce using rule 15 (instructions -> instruction .)
    STRING          reduce using rule 15 (instructions -> instruction .)
    }               reduce using rule 15 (instructions -> instruction .)
    TYPE            reduce using rule 15 (instructions -> instruction .)
    error           reduce using rule 15 (instructions -> instruction .)
    $end            reduce using rule 15 (instructions -> instruction .)


state 37

    (40) break_instr -> BREAK . ;

    ;               shift and go to state 60


state 38

    (16) instruction -> print_instr .

    PRINT           reduce using rule 16 (instruction -> print_instr .)
    ID              reduce using rule 16 (instruction -> print_instr .)
    IF              reduce using rule 16 (instruction -> print_instr .)
    WHILE           reduce using rule 16 (instruction -> print_instr .)
    REPEAT          reduce using rule 16 (instruction -> print_instr .)
    RETURN          reduce using rule 16 (instruction -> print_instr .)
    BREAK           reduce using rule 16 (instruction -> print_instr .)
    CONTINUE        reduce using rule 16 (instruction -> print_instr .)
    {               reduce using rule 16 (instruction -> print_instr .)
    (               reduce using rule 16 (instruction -> print_instr .)
    INTEGER         reduce using rule 16 (instruction -> print_instr .)
    FLOAT           reduce using rule 16 (instruction -> print_instr .)
    STRING          reduce using rule 16 (instruction -> print_instr .)
    TYPE            reduce using rule 16 (instruction -> print_instr .)
    error           reduce using rule 16 (instruction -> print_instr .)
    $end            reduce using rule 16 (instruction -> print_instr .)
    UNTIL           reduce using rule 16 (instruction -> print_instr .)
    }               reduce using rule 16 (instruction -> print_instr .)
    ELSE            reduce using rule 16 (instruction -> print_instr .)


state 39

    (39) continue_instr -> CONTINUE . ;

    ;               shift and go to state 61


state 40

    (41) compound_instr -> { . declarations instructions_opt }
    (5) declarations -> . declarations declaration
    (6) declarations -> .

    TYPE            reduce using rule 6 (declarations -> .)
    error           reduce using rule 6 (declarations -> .)
    PRINT           reduce using rule 6 (declarations -> .)
    ID              reduce using rule 6 (declarations -> .)
    IF              reduce using rule 6 (declarations -> .)
    WHILE           reduce using rule 6 (declarations -> .)
    REPEAT          reduce using rule 6 (declarations -> .)
    RETURN          reduce using rule 6 (declarations -> .)
    BREAK           reduce using rule 6 (declarations -> .)
    CONTINUE        reduce using rule 6 (declarations -> .)
    {               reduce using rule 6 (declarations -> .)
    (               reduce using rule 6 (declarations -> .)
    INTEGER         reduce using rule 6 (declarations -> .)
    FLOAT           reduce using rule 6 (declarations -> .)
    STRING          reduce using rule 6 (declarations -> .)
    }               reduce using rule 6 (declarations -> .)

    declarations                   shift and go to state 62

state 41

    (26) instruction -> expression . ;
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    ;               shift and go to state 78
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    |               shift and go to state 80
    &               shift and go to state 67
    ^               shift and go to state 81
    AND             shift and go to state 63
    OR              shift and go to state 74
    SHL             shift and go to state 69
    SHR             shift and go to state 64
    EQ              shift and go to state 75
    NEQ             shift and go to state 79
    >               shift and go to state 76
    <               shift and go to state 68
    LE              shift and go to state 65
    GE              shift and go to state 77


state 42

    (10) inits -> init .

    ;               reduce using rule 10 (inits -> init .)
    ,               reduce using rule 10 (inits -> init .)


state 43

    (7) declaration -> TYPE inits . ;
    (9) inits -> inits . , init

    ;               shift and go to state 82
    ,               shift and go to state 83


state 44

    (78) fundef -> TYPE ID . ( args_list_or_empty ) compound_instr
    (11) init -> ID . = expression

    (               shift and go to state 84
    =               shift and go to state 85


state 45

    (78) fundef -> TYPE ID . ( args_list_or_empty ) compound_instr

    (               shift and go to state 84


state 46

    (47) expression -> ID .
    (50) expression -> ID . ( expr_list_or_empty )
    (51) expression -> ID . ( error )

    +               reduce using rule 47 (expression -> ID .)
    -               reduce using rule 47 (expression -> ID .)
    *               reduce using rule 47 (expression -> ID .)
    /               reduce using rule 47 (expression -> ID .)
    %               reduce using rule 47 (expression -> ID .)
    |               reduce using rule 47 (expression -> ID .)
    &               reduce using rule 47 (expression -> ID .)
    ^               reduce using rule 47 (expression -> ID .)
    AND             reduce using rule 47 (expression -> ID .)
    OR              reduce using rule 47 (expression -> ID .)
    SHL             reduce using rule 47 (expression -> ID .)
    SHR             reduce using rule 47 (expression -> ID .)
    EQ              reduce using rule 47 (expression -> ID .)
    NEQ             reduce using rule 47 (expression -> ID .)
    >               reduce using rule 47 (expression -> ID .)
    <               reduce using rule 47 (expression -> ID .)
    LE              reduce using rule 47 (expression -> ID .)
    GE              reduce using rule 47 (expression -> ID .)
    ;               reduce using rule 47 (expression -> ID .)
    ,               reduce using rule 47 (expression -> ID .)
    )               reduce using rule 47 (expression -> ID .)
    (               shift and go to state 56


state 47

    (38) return_instr -> RETURN expression . ;
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    ;               shift and go to state 86
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    |               shift and go to state 80
    &               shift and go to state 67
    ^               shift and go to state 81
    AND             shift and go to state 63
    OR              shift and go to state 74
    SHL             shift and go to state 69
    SHR             shift and go to state 64
    EQ              shift and go to state 75
    NEQ             shift and go to state 79
    >               shift and go to state 76
    <               shift and go to state 68
    LE              shift and go to state 65
    GE              shift and go to state 77


state 48

    (31) choice_instr -> IF ( . condition ) instruction
    (32) choice_instr -> IF ( . error ) instruction
    (33) choice_instr -> IF ( . condition ) instruction ELSE instruction
    (34) choice_instr -> IF ( . error ) instruction ELSE instruction
    (42) condition -> . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    error           shift and go to state 88
    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 89
    condition                      shift and go to state 87

state 49

    (27) print_instr -> PRINT expr_list . ;
    (72) expr_list -> expr_list . , expression

    ;               shift and go to state 90
    ,               shift and go to state 91


state 50

    (28) print_instr -> PRINT error . ;

    ;               shift and go to state 92


state 51

    (73) expr_list -> expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    ;               reduce using rule 73 (expr_list -> expression .)
    ,               reduce using rule 73 (expr_list -> expression .)
    )               reduce using rule 73 (expr_list -> expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    |               shift and go to state 80
    &               shift and go to state 67
    ^               shift and go to state 81
    AND             shift and go to state 63
    OR              shift and go to state 74
    SHL             shift and go to state 69
    SHR             shift and go to state 64
    EQ              shift and go to state 75
    NEQ             shift and go to state 79
    >               shift and go to state 76
    <               shift and go to state 68
    LE              shift and go to state 65
    GE              shift and go to state 77


state 52

    (35) while_instr -> WHILE ( . condition ) instruction
    (36) while_instr -> WHILE ( . error ) instruction
    (42) condition -> . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    error           shift and go to state 94
    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 89
    condition                      shift and go to state 93

state 53

    (49) expression -> ( error . )

    )               shift and go to state 95


state 54

    (48) expression -> ( expression . )
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    )               shift and go to state 96
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    |               shift and go to state 80
    &               shift and go to state 67
    ^               shift and go to state 81
    AND             shift and go to state 63
    OR              shift and go to state 74
    SHL             shift and go to state 69
    SHR             shift and go to state 64
    EQ              shift and go to state 75
    NEQ             shift and go to state 79
    >               shift and go to state 76
    <               shift and go to state 68
    LE              shift and go to state 65
    GE              shift and go to state 77


state 55

    (37) repeat_instr -> REPEAT instructions . UNTIL condition ;
    (14) instructions -> instructions . instruction
    (16) instruction -> . print_instr
    (17) instruction -> . labeled_instr
    (18) instruction -> . assignment
    (19) instruction -> . choice_instr
    (20) instruction -> . while_instr
    (21) instruction -> . repeat_instr
    (22) instruction -> . return_instr
    (23) instruction -> . break_instr
    (24) instruction -> . continue_instr
    (25) instruction -> . compound_instr
    (26) instruction -> . expression ;
    (27) print_instr -> . PRINT expr_list ;
    (28) print_instr -> . PRINT error ;
    (29) labeled_instr -> . ID : instruction
    (30) assignment -> . ID = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions_opt }
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    UNTIL           shift and go to state 97
    PRINT           shift and go to state 17
    ID              shift and go to state 32
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    REPEAT          shift and go to state 25
    RETURN          shift and go to state 14
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 39
    {               shift and go to state 40
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    return_instr                   shift and go to state 20
    const                          shift and go to state 21
    assignment                     shift and go to state 27
    instruction                    shift and go to state 59
    compound_instr                 shift and go to state 30
    continue_instr                 shift and go to state 23
    labeled_instr                  shift and go to state 28
    print_instr                    shift and go to state 38
    choice_instr                   shift and go to state 15
    repeat_instr                   shift and go to state 19
    break_instr                    shift and go to state 35
    while_instr                    shift and go to state 24
    expression                     shift and go to state 41

state 56

    (50) expression -> ID ( . expr_list_or_empty )
    (51) expression -> ID ( . error )
    (70) expr_list_or_empty -> . expr_list
    (71) expr_list_or_empty -> .
    (72) expr_list -> . expr_list , expression
    (73) expr_list -> . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    error           shift and go to state 100
    )               reduce using rule 71 (expr_list_or_empty -> .)
    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    expr_list                      shift and go to state 98
    expr_list_or_empty             shift and go to state 99
    expression                     shift and go to state 51
    const                          shift and go to state 21

state 57

    (29) labeled_instr -> ID : . instruction
    (16) instruction -> . print_instr
    (17) instruction -> . labeled_instr
    (18) instruction -> . assignment
    (19) instruction -> . choice_instr
    (20) instruction -> . while_instr
    (21) instruction -> . repeat_instr
    (22) instruction -> . return_instr
    (23) instruction -> . break_instr
    (24) instruction -> . continue_instr
    (25) instruction -> . compound_instr
    (26) instruction -> . expression ;
    (27) print_instr -> . PRINT expr_list ;
    (28) print_instr -> . PRINT error ;
    (29) labeled_instr -> . ID : instruction
    (30) assignment -> . ID = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions_opt }
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    PRINT           shift and go to state 17
    ID              shift and go to state 32
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    REPEAT          shift and go to state 25
    RETURN          shift and go to state 14
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 39
    {               shift and go to state 40
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    return_instr                   shift and go to state 20
    const                          shift and go to state 21
    assignment                     shift and go to state 27
    instruction                    shift and go to state 101
    compound_instr                 shift and go to state 30
    continue_instr                 shift and go to state 23
    while_instr                    shift and go to state 24
    print_instr                    shift and go to state 38
    choice_instr                   shift and go to state 15
    break_instr                    shift and go to state 35
    labeled_instr                  shift and go to state 28
    expression                     shift and go to state 41
    repeat_instr                   shift and go to state 19

state 58

    (30) assignment -> ID = . expression ;
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 102

state 59

    (14) instructions -> instructions instruction .

    UNTIL           reduce using rule 14 (instructions -> instructions instruction .)
    PRINT           reduce using rule 14 (instructions -> instructions instruction .)
    ID              reduce using rule 14 (instructions -> instructions instruction .)
    IF              reduce using rule 14 (instructions -> instructions instruction .)
    WHILE           reduce using rule 14 (instructions -> instructions instruction .)
    REPEAT          reduce using rule 14 (instructions -> instructions instruction .)
    RETURN          reduce using rule 14 (instructions -> instructions instruction .)
    BREAK           reduce using rule 14 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 14 (instructions -> instructions instruction .)
    {               reduce using rule 14 (instructions -> instructions instruction .)
    (               reduce using rule 14 (instructions -> instructions instruction .)
    INTEGER         reduce using rule 14 (instructions -> instructions instruction .)
    FLOAT           reduce using rule 14 (instructions -> instructions instruction .)
    STRING          reduce using rule 14 (instructions -> instructions instruction .)
    }               reduce using rule 14 (instructions -> instructions instruction .)
    TYPE            reduce using rule 14 (instructions -> instructions instruction .)
    error           reduce using rule 14 (instructions -> instructions instruction .)
    $end            reduce using rule 14 (instructions -> instructions instruction .)


state 60

    (40) break_instr -> BREAK ; .

    PRINT           reduce using rule 40 (break_instr -> BREAK ; .)
    ID              reduce using rule 40 (break_instr -> BREAK ; .)
    IF              reduce using rule 40 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 40 (break_instr -> BREAK ; .)
    REPEAT          reduce using rule 40 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 40 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 40 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 40 (break_instr -> BREAK ; .)
    {               reduce using rule 40 (break_instr -> BREAK ; .)
    (               reduce using rule 40 (break_instr -> BREAK ; .)
    INTEGER         reduce using rule 40 (break_instr -> BREAK ; .)
    FLOAT           reduce using rule 40 (break_instr -> BREAK ; .)
    STRING          reduce using rule 40 (break_instr -> BREAK ; .)
    }               reduce using rule 40 (break_instr -> BREAK ; .)
    UNTIL           reduce using rule 40 (break_instr -> BREAK ; .)
    TYPE            reduce using rule 40 (break_instr -> BREAK ; .)
    error           reduce using rule 40 (break_instr -> BREAK ; .)
    $end            reduce using rule 40 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 40 (break_instr -> BREAK ; .)


state 61

    (39) continue_instr -> CONTINUE ; .

    PRINT           reduce using rule 39 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 39 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 39 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 39 (continue_instr -> CONTINUE ; .)
    REPEAT          reduce using rule 39 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 39 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 39 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 39 (continue_instr -> CONTINUE ; .)
    {               reduce using rule 39 (continue_instr -> CONTINUE ; .)
    (               reduce using rule 39 (continue_instr -> CONTINUE ; .)
    INTEGER         reduce using rule 39 (continue_instr -> CONTINUE ; .)
    FLOAT           reduce using rule 39 (continue_instr -> CONTINUE ; .)
    STRING          reduce using rule 39 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 39 (continue_instr -> CONTINUE ; .)
    TYPE            reduce using rule 39 (continue_instr -> CONTINUE ; .)
    error           reduce using rule 39 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 39 (continue_instr -> CONTINUE ; .)
    UNTIL           reduce using rule 39 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 39 (continue_instr -> CONTINUE ; .)


state 62

    (41) compound_instr -> { declarations . instructions_opt }
    (5) declarations -> declarations . declaration
    (12) instructions_opt -> . instructions
    (13) instructions_opt -> .
    (7) declaration -> . TYPE inits ;
    (8) declaration -> . error ;
    (14) instructions -> . instructions instruction
    (15) instructions -> . instruction
    (16) instruction -> . print_instr
    (17) instruction -> . labeled_instr
    (18) instruction -> . assignment
    (19) instruction -> . choice_instr
    (20) instruction -> . while_instr
    (21) instruction -> . repeat_instr
    (22) instruction -> . return_instr
    (23) instruction -> . break_instr
    (24) instruction -> . continue_instr
    (25) instruction -> . compound_instr
    (26) instruction -> . expression ;
    (27) print_instr -> . PRINT expr_list ;
    (28) print_instr -> . PRINT error ;
    (29) labeled_instr -> . ID : instruction
    (30) assignment -> . ID = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions_opt }
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    }               reduce using rule 13 (instructions_opt -> .)
    TYPE            shift and go to state 104
    error           shift and go to state 5
    PRINT           shift and go to state 17
    ID              shift and go to state 32
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    REPEAT          shift and go to state 25
    RETURN          shift and go to state 14
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 39
    {               shift and go to state 40
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    return_instr                   shift and go to state 20
    break_instr                    shift and go to state 35
    const                          shift and go to state 21
    print_instr                    shift and go to state 38
    assignment                     shift and go to state 27
    instruction                    shift and go to state 36
    compound_instr                 shift and go to state 30
    continue_instr                 shift and go to state 23
    labeled_instr                  shift and go to state 28
    instructions_opt               shift and go to state 103
    choice_instr                   shift and go to state 15
    declaration                    shift and go to state 9
    while_instr                    shift and go to state 24
    expression                     shift and go to state 41
    repeat_instr                   shift and go to state 19
    instructions                   shift and go to state 33

state 63

    (60) expression -> expression AND . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 105

state 64

    (63) expression -> expression SHR . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 106

state 65

    (68) expression -> expression LE . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 107

state 66

    (56) expression -> expression % . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 108

state 67

    (58) expression -> expression & . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 109

state 68

    (67) expression -> expression < . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 110

state 69

    (62) expression -> expression SHL . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 111

state 70

    (52) expression -> expression + . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 112

state 71

    (54) expression -> expression * . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 113

state 72

    (53) expression -> expression - . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 114

state 73

    (55) expression -> expression / . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 115

state 74

    (61) expression -> expression OR . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 116

state 75

    (64) expression -> expression EQ . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 117

state 76

    (66) expression -> expression > . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 118

state 77

    (69) expression -> expression GE . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 119

state 78

    (26) instruction -> expression ; .

    PRINT           reduce using rule 26 (instruction -> expression ; .)
    ID              reduce using rule 26 (instruction -> expression ; .)
    IF              reduce using rule 26 (instruction -> expression ; .)
    WHILE           reduce using rule 26 (instruction -> expression ; .)
    REPEAT          reduce using rule 26 (instruction -> expression ; .)
    RETURN          reduce using rule 26 (instruction -> expression ; .)
    BREAK           reduce using rule 26 (instruction -> expression ; .)
    CONTINUE        reduce using rule 26 (instruction -> expression ; .)
    {               reduce using rule 26 (instruction -> expression ; .)
    (               reduce using rule 26 (instruction -> expression ; .)
    INTEGER         reduce using rule 26 (instruction -> expression ; .)
    FLOAT           reduce using rule 26 (instruction -> expression ; .)
    STRING          reduce using rule 26 (instruction -> expression ; .)
    TYPE            reduce using rule 26 (instruction -> expression ; .)
    error           reduce using rule 26 (instruction -> expression ; .)
    $end            reduce using rule 26 (instruction -> expression ; .)
    UNTIL           reduce using rule 26 (instruction -> expression ; .)
    }               reduce using rule 26 (instruction -> expression ; .)
    ELSE            reduce using rule 26 (instruction -> expression ; .)


state 79

    (65) expression -> expression NEQ . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 120

state 80

    (57) expression -> expression | . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 121

state 81

    (59) expression -> expression ^ . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 122

state 82

    (7) declaration -> TYPE inits ; .

    TYPE            reduce using rule 7 (declaration -> TYPE inits ; .)
    error           reduce using rule 7 (declaration -> TYPE inits ; .)
    PRINT           reduce using rule 7 (declaration -> TYPE inits ; .)
    ID              reduce using rule 7 (declaration -> TYPE inits ; .)
    IF              reduce using rule 7 (declaration -> TYPE inits ; .)
    WHILE           reduce using rule 7 (declaration -> TYPE inits ; .)
    REPEAT          reduce using rule 7 (declaration -> TYPE inits ; .)
    RETURN          reduce using rule 7 (declaration -> TYPE inits ; .)
    BREAK           reduce using rule 7 (declaration -> TYPE inits ; .)
    CONTINUE        reduce using rule 7 (declaration -> TYPE inits ; .)
    {               reduce using rule 7 (declaration -> TYPE inits ; .)
    (               reduce using rule 7 (declaration -> TYPE inits ; .)
    INTEGER         reduce using rule 7 (declaration -> TYPE inits ; .)
    FLOAT           reduce using rule 7 (declaration -> TYPE inits ; .)
    STRING          reduce using rule 7 (declaration -> TYPE inits ; .)
    $end            reduce using rule 7 (declaration -> TYPE inits ; .)
    }               reduce using rule 7 (declaration -> TYPE inits ; .)


state 83

    (9) inits -> inits , . init
    (11) init -> . ID = expression

    ID              shift and go to state 124

    init                           shift and go to state 123

state 84

    (78) fundef -> TYPE ID ( . args_list_or_empty ) compound_instr
    (79) args_list_or_empty -> . args_list
    (80) args_list_or_empty -> .
    (81) args_list -> . args_list , arg
    (82) args_list -> . arg
    (83) arg -> . TYPE ID

    )               reduce using rule 80 (args_list_or_empty -> .)
    TYPE            shift and go to state 128

    args_list_or_empty             shift and go to state 126
    arg                            shift and go to state 127
    args_list                      shift and go to state 125

state 85

    (11) init -> ID = . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 129

state 86

    (38) return_instr -> RETURN expression ; .

    PRINT           reduce using rule 38 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 38 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 38 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 38 (return_instr -> RETURN expression ; .)
    REPEAT          reduce using rule 38 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 38 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 38 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 38 (return_instr -> RETURN expression ; .)
    {               reduce using rule 38 (return_instr -> RETURN expression ; .)
    (               reduce using rule 38 (return_instr -> RETURN expression ; .)
    INTEGER         reduce using rule 38 (return_instr -> RETURN expression ; .)
    FLOAT           reduce using rule 38 (return_instr -> RETURN expression ; .)
    STRING          reduce using rule 38 (return_instr -> RETURN expression ; .)
    TYPE            reduce using rule 38 (return_instr -> RETURN expression ; .)
    error           reduce using rule 38 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 38 (return_instr -> RETURN expression ; .)
    }               reduce using rule 38 (return_instr -> RETURN expression ; .)
    UNTIL           reduce using rule 38 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 38 (return_instr -> RETURN expression ; .)


state 87

    (31) choice_instr -> IF ( condition . ) instruction
    (33) choice_instr -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 130


state 88

    (32) choice_instr -> IF ( error . ) instruction
    (34) choice_instr -> IF ( error . ) instruction ELSE instruction

    )               shift and go to state 131


state 89

    (42) condition -> expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    )               reduce using rule 42 (condition -> expression .)
    ;               reduce using rule 42 (condition -> expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    |               shift and go to state 80
    &               shift and go to state 67
    ^               shift and go to state 81
    AND             shift and go to state 63
    OR              shift and go to state 74
    SHL             shift and go to state 69
    SHR             shift and go to state 64
    EQ              shift and go to state 75
    NEQ             shift and go to state 79
    >               shift and go to state 76
    <               shift and go to state 68
    LE              shift and go to state 65
    GE              shift and go to state 77


state 90

    (27) print_instr -> PRINT expr_list ; .

    PRINT           reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    ID              reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    IF              reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    WHILE           reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    REPEAT          reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    RETURN          reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    BREAK           reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    CONTINUE        reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    {               reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    (               reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    INTEGER         reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    FLOAT           reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    STRING          reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    TYPE            reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    error           reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    $end            reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    UNTIL           reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    }               reduce using rule 27 (print_instr -> PRINT expr_list ; .)
    ELSE            reduce using rule 27 (print_instr -> PRINT expr_list ; .)


state 91

    (72) expr_list -> expr_list , . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    expression                     shift and go to state 132
    const                          shift and go to state 21

state 92

    (28) print_instr -> PRINT error ; .

    PRINT           reduce using rule 28 (print_instr -> PRINT error ; .)
    ID              reduce using rule 28 (print_instr -> PRINT error ; .)
    IF              reduce using rule 28 (print_instr -> PRINT error ; .)
    WHILE           reduce using rule 28 (print_instr -> PRINT error ; .)
    REPEAT          reduce using rule 28 (print_instr -> PRINT error ; .)
    RETURN          reduce using rule 28 (print_instr -> PRINT error ; .)
    BREAK           reduce using rule 28 (print_instr -> PRINT error ; .)
    CONTINUE        reduce using rule 28 (print_instr -> PRINT error ; .)
    {               reduce using rule 28 (print_instr -> PRINT error ; .)
    (               reduce using rule 28 (print_instr -> PRINT error ; .)
    INTEGER         reduce using rule 28 (print_instr -> PRINT error ; .)
    FLOAT           reduce using rule 28 (print_instr -> PRINT error ; .)
    STRING          reduce using rule 28 (print_instr -> PRINT error ; .)
    TYPE            reduce using rule 28 (print_instr -> PRINT error ; .)
    error           reduce using rule 28 (print_instr -> PRINT error ; .)
    $end            reduce using rule 28 (print_instr -> PRINT error ; .)
    UNTIL           reduce using rule 28 (print_instr -> PRINT error ; .)
    }               reduce using rule 28 (print_instr -> PRINT error ; .)
    ELSE            reduce using rule 28 (print_instr -> PRINT error ; .)


state 93

    (35) while_instr -> WHILE ( condition . ) instruction

    )               shift and go to state 133


state 94

    (36) while_instr -> WHILE ( error . ) instruction

    )               shift and go to state 134


state 95

    (49) expression -> ( error ) .

    +               reduce using rule 49 (expression -> ( error ) .)
    -               reduce using rule 49 (expression -> ( error ) .)
    *               reduce using rule 49 (expression -> ( error ) .)
    /               reduce using rule 49 (expression -> ( error ) .)
    %               reduce using rule 49 (expression -> ( error ) .)
    |               reduce using rule 49 (expression -> ( error ) .)
    &               reduce using rule 49 (expression -> ( error ) .)
    ^               reduce using rule 49 (expression -> ( error ) .)
    AND             reduce using rule 49 (expression -> ( error ) .)
    OR              reduce using rule 49 (expression -> ( error ) .)
    SHL             reduce using rule 49 (expression -> ( error ) .)
    SHR             reduce using rule 49 (expression -> ( error ) .)
    EQ              reduce using rule 49 (expression -> ( error ) .)
    NEQ             reduce using rule 49 (expression -> ( error ) .)
    >               reduce using rule 49 (expression -> ( error ) .)
    <               reduce using rule 49 (expression -> ( error ) .)
    LE              reduce using rule 49 (expression -> ( error ) .)
    GE              reduce using rule 49 (expression -> ( error ) .)
    ;               reduce using rule 49 (expression -> ( error ) .)
    ,               reduce using rule 49 (expression -> ( error ) .)
    )               reduce using rule 49 (expression -> ( error ) .)


state 96

    (48) expression -> ( expression ) .

    +               reduce using rule 48 (expression -> ( expression ) .)
    -               reduce using rule 48 (expression -> ( expression ) .)
    *               reduce using rule 48 (expression -> ( expression ) .)
    /               reduce using rule 48 (expression -> ( expression ) .)
    %               reduce using rule 48 (expression -> ( expression ) .)
    |               reduce using rule 48 (expression -> ( expression ) .)
    &               reduce using rule 48 (expression -> ( expression ) .)
    ^               reduce using rule 48 (expression -> ( expression ) .)
    AND             reduce using rule 48 (expression -> ( expression ) .)
    OR              reduce using rule 48 (expression -> ( expression ) .)
    SHL             reduce using rule 48 (expression -> ( expression ) .)
    SHR             reduce using rule 48 (expression -> ( expression ) .)
    EQ              reduce using rule 48 (expression -> ( expression ) .)
    NEQ             reduce using rule 48 (expression -> ( expression ) .)
    >               reduce using rule 48 (expression -> ( expression ) .)
    <               reduce using rule 48 (expression -> ( expression ) .)
    LE              reduce using rule 48 (expression -> ( expression ) .)
    GE              reduce using rule 48 (expression -> ( expression ) .)
    ;               reduce using rule 48 (expression -> ( expression ) .)
    ,               reduce using rule 48 (expression -> ( expression ) .)
    )               reduce using rule 48 (expression -> ( expression ) .)


state 97

    (37) repeat_instr -> REPEAT instructions UNTIL . condition ;
    (42) condition -> . expression
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    ID              shift and go to state 46
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    const                          shift and go to state 21
    expression                     shift and go to state 89
    condition                      shift and go to state 135

state 98

    (70) expr_list_or_empty -> expr_list .
    (72) expr_list -> expr_list . , expression

    )               reduce using rule 70 (expr_list_or_empty -> expr_list .)
    ,               shift and go to state 91


state 99

    (50) expression -> ID ( expr_list_or_empty . )

    )               shift and go to state 136


state 100

    (51) expression -> ID ( error . )

    )               shift and go to state 137


state 101

    (29) labeled_instr -> ID : instruction .

    PRINT           reduce using rule 29 (labeled_instr -> ID : instruction .)
    ID              reduce using rule 29 (labeled_instr -> ID : instruction .)
    IF              reduce using rule 29 (labeled_instr -> ID : instruction .)
    WHILE           reduce using rule 29 (labeled_instr -> ID : instruction .)
    REPEAT          reduce using rule 29 (labeled_instr -> ID : instruction .)
    RETURN          reduce using rule 29 (labeled_instr -> ID : instruction .)
    BREAK           reduce using rule 29 (labeled_instr -> ID : instruction .)
    CONTINUE        reduce using rule 29 (labeled_instr -> ID : instruction .)
    {               reduce using rule 29 (labeled_instr -> ID : instruction .)
    (               reduce using rule 29 (labeled_instr -> ID : instruction .)
    INTEGER         reduce using rule 29 (labeled_instr -> ID : instruction .)
    FLOAT           reduce using rule 29 (labeled_instr -> ID : instruction .)
    STRING          reduce using rule 29 (labeled_instr -> ID : instruction .)
    TYPE            reduce using rule 29 (labeled_instr -> ID : instruction .)
    error           reduce using rule 29 (labeled_instr -> ID : instruction .)
    $end            reduce using rule 29 (labeled_instr -> ID : instruction .)
    UNTIL           reduce using rule 29 (labeled_instr -> ID : instruction .)
    }               reduce using rule 29 (labeled_instr -> ID : instruction .)
    ELSE            reduce using rule 29 (labeled_instr -> ID : instruction .)


state 102

    (30) assignment -> ID = expression . ;
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    ;               shift and go to state 138
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    |               shift and go to state 80
    &               shift and go to state 67
    ^               shift and go to state 81
    AND             shift and go to state 63
    OR              shift and go to state 74
    SHL             shift and go to state 69
    SHR             shift and go to state 64
    EQ              shift and go to state 75
    NEQ             shift and go to state 79
    >               shift and go to state 76
    <               shift and go to state 68
    LE              shift and go to state 65
    GE              shift and go to state 77


state 103

    (41) compound_instr -> { declarations instructions_opt . }

    }               shift and go to state 139


state 104

    (7) declaration -> TYPE . inits ;
    (9) inits -> . inits , init
    (10) inits -> . init
    (11) init -> . ID = expression

    ID              shift and go to state 124

    init                           shift and go to state 42
    inits                          shift and go to state 43

state 105

    (60) expression -> expression AND expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    AND             reduce using rule 60 (expression -> expression AND expression .)
    OR              reduce using rule 60 (expression -> expression AND expression .)
    ;               reduce using rule 60 (expression -> expression AND expression .)
    ,               reduce using rule 60 (expression -> expression AND expression .)
    )               reduce using rule 60 (expression -> expression AND expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    |               shift and go to state 80
    &               shift and go to state 67
    ^               shift and go to state 81
    SHL             shift and go to state 69
    SHR             shift and go to state 64
    EQ              shift and go to state 75
    NEQ             shift and go to state 79
    >               shift and go to state 76
    <               shift and go to state 68
    LE              shift and go to state 65
    GE              shift and go to state 77

  ! +               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! %               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! |               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! &               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! ^               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! SHL             [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! SHR             [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! >               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! <               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]


state 106

    (63) expression -> expression SHR expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 63 (expression -> expression SHR expression .)
    &               reduce using rule 63 (expression -> expression SHR expression .)
    ^               reduce using rule 63 (expression -> expression SHR expression .)
    AND             reduce using rule 63 (expression -> expression SHR expression .)
    OR              reduce using rule 63 (expression -> expression SHR expression .)
    SHL             reduce using rule 63 (expression -> expression SHR expression .)
    SHR             reduce using rule 63 (expression -> expression SHR expression .)
    EQ              reduce using rule 63 (expression -> expression SHR expression .)
    NEQ             reduce using rule 63 (expression -> expression SHR expression .)
    >               reduce using rule 63 (expression -> expression SHR expression .)
    <               reduce using rule 63 (expression -> expression SHR expression .)
    LE              reduce using rule 63 (expression -> expression SHR expression .)
    GE              reduce using rule 63 (expression -> expression SHR expression .)
    ;               reduce using rule 63 (expression -> expression SHR expression .)
    ,               reduce using rule 63 (expression -> expression SHR expression .)
    )               reduce using rule 63 (expression -> expression SHR expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66

  ! +               [ reduce using rule 63 (expression -> expression SHR expression .) ]
  ! -               [ reduce using rule 63 (expression -> expression SHR expression .) ]
  ! *               [ reduce using rule 63 (expression -> expression SHR expression .) ]
  ! /               [ reduce using rule 63 (expression -> expression SHR expression .) ]
  ! %               [ reduce using rule 63 (expression -> expression SHR expression .) ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]
  ! SHL             [ shift and go to state 69 ]
  ! SHR             [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 75 ]
  ! NEQ             [ shift and go to state 79 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 68 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 77 ]


state 107

    (68) expression -> expression LE expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 68 (expression -> expression LE expression .)
    &               reduce using rule 68 (expression -> expression LE expression .)
    ^               reduce using rule 68 (expression -> expression LE expression .)
    AND             reduce using rule 68 (expression -> expression LE expression .)
    OR              reduce using rule 68 (expression -> expression LE expression .)
    EQ              reduce using rule 68 (expression -> expression LE expression .)
    NEQ             reduce using rule 68 (expression -> expression LE expression .)
    >               reduce using rule 68 (expression -> expression LE expression .)
    <               reduce using rule 68 (expression -> expression LE expression .)
    LE              reduce using rule 68 (expression -> expression LE expression .)
    GE              reduce using rule 68 (expression -> expression LE expression .)
    ;               reduce using rule 68 (expression -> expression LE expression .)
    ,               reduce using rule 68 (expression -> expression LE expression .)
    )               reduce using rule 68 (expression -> expression LE expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    SHL             shift and go to state 69
    SHR             shift and go to state 64

  ! +               [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! %               [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! SHL             [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! SHR             [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]
  ! EQ              [ shift and go to state 75 ]
  ! NEQ             [ shift and go to state 79 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 68 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 77 ]


state 108

    (56) expression -> expression % expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    +               reduce using rule 56 (expression -> expression % expression .)
    -               reduce using rule 56 (expression -> expression % expression .)
    *               reduce using rule 56 (expression -> expression % expression .)
    /               reduce using rule 56 (expression -> expression % expression .)
    %               reduce using rule 56 (expression -> expression % expression .)
    |               reduce using rule 56 (expression -> expression % expression .)
    &               reduce using rule 56 (expression -> expression % expression .)
    ^               reduce using rule 56 (expression -> expression % expression .)
    AND             reduce using rule 56 (expression -> expression % expression .)
    OR              reduce using rule 56 (expression -> expression % expression .)
    SHL             reduce using rule 56 (expression -> expression % expression .)
    SHR             reduce using rule 56 (expression -> expression % expression .)
    EQ              reduce using rule 56 (expression -> expression % expression .)
    NEQ             reduce using rule 56 (expression -> expression % expression .)
    >               reduce using rule 56 (expression -> expression % expression .)
    <               reduce using rule 56 (expression -> expression % expression .)
    LE              reduce using rule 56 (expression -> expression % expression .)
    GE              reduce using rule 56 (expression -> expression % expression .)
    ;               reduce using rule 56 (expression -> expression % expression .)
    ,               reduce using rule 56 (expression -> expression % expression .)
    )               reduce using rule 56 (expression -> expression % expression .)

  ! +               [ shift and go to state 70 ]
  ! -               [ shift and go to state 72 ]
  ! *               [ shift and go to state 71 ]
  ! /               [ shift and go to state 73 ]
  ! %               [ shift and go to state 66 ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]
  ! SHL             [ shift and go to state 69 ]
  ! SHR             [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 75 ]
  ! NEQ             [ shift and go to state 79 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 68 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 77 ]


state 109

    (58) expression -> expression & expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 58 (expression -> expression & expression .)
    &               reduce using rule 58 (expression -> expression & expression .)
    ^               reduce using rule 58 (expression -> expression & expression .)
    AND             reduce using rule 58 (expression -> expression & expression .)
    OR              reduce using rule 58 (expression -> expression & expression .)
    ;               reduce using rule 58 (expression -> expression & expression .)
    ,               reduce using rule 58 (expression -> expression & expression .)
    )               reduce using rule 58 (expression -> expression & expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    SHL             shift and go to state 69
    SHR             shift and go to state 64
    EQ              shift and go to state 75
    NEQ             shift and go to state 79
    >               shift and go to state 76
    <               shift and go to state 68
    LE              shift and go to state 65
    GE              shift and go to state 77

  ! +               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! -               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! *               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! /               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! %               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! SHL             [ reduce using rule 58 (expression -> expression & expression .) ]
  ! SHR             [ reduce using rule 58 (expression -> expression & expression .) ]
  ! EQ              [ reduce using rule 58 (expression -> expression & expression .) ]
  ! NEQ             [ reduce using rule 58 (expression -> expression & expression .) ]
  ! >               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! <               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! LE              [ reduce using rule 58 (expression -> expression & expression .) ]
  ! GE              [ reduce using rule 58 (expression -> expression & expression .) ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]


state 110

    (67) expression -> expression < expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 67 (expression -> expression < expression .)
    &               reduce using rule 67 (expression -> expression < expression .)
    ^               reduce using rule 67 (expression -> expression < expression .)
    AND             reduce using rule 67 (expression -> expression < expression .)
    OR              reduce using rule 67 (expression -> expression < expression .)
    EQ              reduce using rule 67 (expression -> expression < expression .)
    NEQ             reduce using rule 67 (expression -> expression < expression .)
    >               reduce using rule 67 (expression -> expression < expression .)
    <               reduce using rule 67 (expression -> expression < expression .)
    LE              reduce using rule 67 (expression -> expression < expression .)
    GE              reduce using rule 67 (expression -> expression < expression .)
    ;               reduce using rule 67 (expression -> expression < expression .)
    ,               reduce using rule 67 (expression -> expression < expression .)
    )               reduce using rule 67 (expression -> expression < expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    SHL             shift and go to state 69
    SHR             shift and go to state 64

  ! +               [ reduce using rule 67 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 67 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 67 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 67 (expression -> expression < expression .) ]
  ! %               [ reduce using rule 67 (expression -> expression < expression .) ]
  ! SHL             [ reduce using rule 67 (expression -> expression < expression .) ]
  ! SHR             [ reduce using rule 67 (expression -> expression < expression .) ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]
  ! EQ              [ shift and go to state 75 ]
  ! NEQ             [ shift and go to state 79 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 68 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 77 ]


state 111

    (62) expression -> expression SHL expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 62 (expression -> expression SHL expression .)
    &               reduce using rule 62 (expression -> expression SHL expression .)
    ^               reduce using rule 62 (expression -> expression SHL expression .)
    AND             reduce using rule 62 (expression -> expression SHL expression .)
    OR              reduce using rule 62 (expression -> expression SHL expression .)
    SHL             reduce using rule 62 (expression -> expression SHL expression .)
    SHR             reduce using rule 62 (expression -> expression SHL expression .)
    EQ              reduce using rule 62 (expression -> expression SHL expression .)
    NEQ             reduce using rule 62 (expression -> expression SHL expression .)
    >               reduce using rule 62 (expression -> expression SHL expression .)
    <               reduce using rule 62 (expression -> expression SHL expression .)
    LE              reduce using rule 62 (expression -> expression SHL expression .)
    GE              reduce using rule 62 (expression -> expression SHL expression .)
    ;               reduce using rule 62 (expression -> expression SHL expression .)
    ,               reduce using rule 62 (expression -> expression SHL expression .)
    )               reduce using rule 62 (expression -> expression SHL expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66

  ! +               [ reduce using rule 62 (expression -> expression SHL expression .) ]
  ! -               [ reduce using rule 62 (expression -> expression SHL expression .) ]
  ! *               [ reduce using rule 62 (expression -> expression SHL expression .) ]
  ! /               [ reduce using rule 62 (expression -> expression SHL expression .) ]
  ! %               [ reduce using rule 62 (expression -> expression SHL expression .) ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]
  ! SHL             [ shift and go to state 69 ]
  ! SHR             [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 75 ]
  ! NEQ             [ shift and go to state 79 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 68 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 77 ]


state 112

    (52) expression -> expression + expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    +               reduce using rule 52 (expression -> expression + expression .)
    -               reduce using rule 52 (expression -> expression + expression .)
    |               reduce using rule 52 (expression -> expression + expression .)
    &               reduce using rule 52 (expression -> expression + expression .)
    ^               reduce using rule 52 (expression -> expression + expression .)
    AND             reduce using rule 52 (expression -> expression + expression .)
    OR              reduce using rule 52 (expression -> expression + expression .)
    SHL             reduce using rule 52 (expression -> expression + expression .)
    SHR             reduce using rule 52 (expression -> expression + expression .)
    EQ              reduce using rule 52 (expression -> expression + expression .)
    NEQ             reduce using rule 52 (expression -> expression + expression .)
    >               reduce using rule 52 (expression -> expression + expression .)
    <               reduce using rule 52 (expression -> expression + expression .)
    LE              reduce using rule 52 (expression -> expression + expression .)
    GE              reduce using rule 52 (expression -> expression + expression .)
    ;               reduce using rule 52 (expression -> expression + expression .)
    ,               reduce using rule 52 (expression -> expression + expression .)
    )               reduce using rule 52 (expression -> expression + expression .)
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66

  ! *               [ reduce using rule 52 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 52 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 52 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 70 ]
  ! -               [ shift and go to state 72 ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]
  ! SHL             [ shift and go to state 69 ]
  ! SHR             [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 75 ]
  ! NEQ             [ shift and go to state 79 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 68 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 77 ]


state 113

    (54) expression -> expression * expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    +               reduce using rule 54 (expression -> expression * expression .)
    -               reduce using rule 54 (expression -> expression * expression .)
    *               reduce using rule 54 (expression -> expression * expression .)
    /               reduce using rule 54 (expression -> expression * expression .)
    %               reduce using rule 54 (expression -> expression * expression .)
    |               reduce using rule 54 (expression -> expression * expression .)
    &               reduce using rule 54 (expression -> expression * expression .)
    ^               reduce using rule 54 (expression -> expression * expression .)
    AND             reduce using rule 54 (expression -> expression * expression .)
    OR              reduce using rule 54 (expression -> expression * expression .)
    SHL             reduce using rule 54 (expression -> expression * expression .)
    SHR             reduce using rule 54 (expression -> expression * expression .)
    EQ              reduce using rule 54 (expression -> expression * expression .)
    NEQ             reduce using rule 54 (expression -> expression * expression .)
    >               reduce using rule 54 (expression -> expression * expression .)
    <               reduce using rule 54 (expression -> expression * expression .)
    LE              reduce using rule 54 (expression -> expression * expression .)
    GE              reduce using rule 54 (expression -> expression * expression .)
    ;               reduce using rule 54 (expression -> expression * expression .)
    ,               reduce using rule 54 (expression -> expression * expression .)
    )               reduce using rule 54 (expression -> expression * expression .)

  ! +               [ shift and go to state 70 ]
  ! -               [ shift and go to state 72 ]
  ! *               [ shift and go to state 71 ]
  ! /               [ shift and go to state 73 ]
  ! %               [ shift and go to state 66 ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]
  ! SHL             [ shift and go to state 69 ]
  ! SHR             [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 75 ]
  ! NEQ             [ shift and go to state 79 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 68 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 77 ]


state 114

    (53) expression -> expression - expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    +               reduce using rule 53 (expression -> expression - expression .)
    -               reduce using rule 53 (expression -> expression - expression .)
    |               reduce using rule 53 (expression -> expression - expression .)
    &               reduce using rule 53 (expression -> expression - expression .)
    ^               reduce using rule 53 (expression -> expression - expression .)
    AND             reduce using rule 53 (expression -> expression - expression .)
    OR              reduce using rule 53 (expression -> expression - expression .)
    SHL             reduce using rule 53 (expression -> expression - expression .)
    SHR             reduce using rule 53 (expression -> expression - expression .)
    EQ              reduce using rule 53 (expression -> expression - expression .)
    NEQ             reduce using rule 53 (expression -> expression - expression .)
    >               reduce using rule 53 (expression -> expression - expression .)
    <               reduce using rule 53 (expression -> expression - expression .)
    LE              reduce using rule 53 (expression -> expression - expression .)
    GE              reduce using rule 53 (expression -> expression - expression .)
    ;               reduce using rule 53 (expression -> expression - expression .)
    ,               reduce using rule 53 (expression -> expression - expression .)
    )               reduce using rule 53 (expression -> expression - expression .)
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66

  ! *               [ reduce using rule 53 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 53 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 53 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 70 ]
  ! -               [ shift and go to state 72 ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]
  ! SHL             [ shift and go to state 69 ]
  ! SHR             [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 75 ]
  ! NEQ             [ shift and go to state 79 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 68 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 77 ]


state 115

    (55) expression -> expression / expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    +               reduce using rule 55 (expression -> expression / expression .)
    -               reduce using rule 55 (expression -> expression / expression .)
    *               reduce using rule 55 (expression -> expression / expression .)
    /               reduce using rule 55 (expression -> expression / expression .)
    %               reduce using rule 55 (expression -> expression / expression .)
    |               reduce using rule 55 (expression -> expression / expression .)
    &               reduce using rule 55 (expression -> expression / expression .)
    ^               reduce using rule 55 (expression -> expression / expression .)
    AND             reduce using rule 55 (expression -> expression / expression .)
    OR              reduce using rule 55 (expression -> expression / expression .)
    SHL             reduce using rule 55 (expression -> expression / expression .)
    SHR             reduce using rule 55 (expression -> expression / expression .)
    EQ              reduce using rule 55 (expression -> expression / expression .)
    NEQ             reduce using rule 55 (expression -> expression / expression .)
    >               reduce using rule 55 (expression -> expression / expression .)
    <               reduce using rule 55 (expression -> expression / expression .)
    LE              reduce using rule 55 (expression -> expression / expression .)
    GE              reduce using rule 55 (expression -> expression / expression .)
    ;               reduce using rule 55 (expression -> expression / expression .)
    ,               reduce using rule 55 (expression -> expression / expression .)
    )               reduce using rule 55 (expression -> expression / expression .)

  ! +               [ shift and go to state 70 ]
  ! -               [ shift and go to state 72 ]
  ! *               [ shift and go to state 71 ]
  ! /               [ shift and go to state 73 ]
  ! %               [ shift and go to state 66 ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]
  ! SHL             [ shift and go to state 69 ]
  ! SHR             [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 75 ]
  ! NEQ             [ shift and go to state 79 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 68 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 77 ]


state 116

    (61) expression -> expression OR expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    OR              reduce using rule 61 (expression -> expression OR expression .)
    ;               reduce using rule 61 (expression -> expression OR expression .)
    ,               reduce using rule 61 (expression -> expression OR expression .)
    )               reduce using rule 61 (expression -> expression OR expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    |               shift and go to state 80
    &               shift and go to state 67
    ^               shift and go to state 81
    AND             shift and go to state 63
    SHL             shift and go to state 69
    SHR             shift and go to state 64
    EQ              shift and go to state 75
    NEQ             shift and go to state 79
    >               shift and go to state 76
    <               shift and go to state 68
    LE              shift and go to state 65
    GE              shift and go to state 77

  ! +               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! %               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! |               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! &               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! ^               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! SHL             [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! SHR             [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! >               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! <               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 74 ]


state 117

    (64) expression -> expression EQ expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 64 (expression -> expression EQ expression .)
    &               reduce using rule 64 (expression -> expression EQ expression .)
    ^               reduce using rule 64 (expression -> expression EQ expression .)
    AND             reduce using rule 64 (expression -> expression EQ expression .)
    OR              reduce using rule 64 (expression -> expression EQ expression .)
    EQ              reduce using rule 64 (expression -> expression EQ expression .)
    NEQ             reduce using rule 64 (expression -> expression EQ expression .)
    >               reduce using rule 64 (expression -> expression EQ expression .)
    <               reduce using rule 64 (expression -> expression EQ expression .)
    LE              reduce using rule 64 (expression -> expression EQ expression .)
    GE              reduce using rule 64 (expression -> expression EQ expression .)
    ;               reduce using rule 64 (expression -> expression EQ expression .)
    ,               reduce using rule 64 (expression -> expression EQ expression .)
    )               reduce using rule 64 (expression -> expression EQ expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    SHL             shift and go to state 69
    SHR             shift and go to state 64

  ! +               [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! %               [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! SHL             [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! SHR             [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]
  ! EQ              [ shift and go to state 75 ]
  ! NEQ             [ shift and go to state 79 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 68 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 77 ]


state 118

    (66) expression -> expression > expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 66 (expression -> expression > expression .)
    &               reduce using rule 66 (expression -> expression > expression .)
    ^               reduce using rule 66 (expression -> expression > expression .)
    AND             reduce using rule 66 (expression -> expression > expression .)
    OR              reduce using rule 66 (expression -> expression > expression .)
    EQ              reduce using rule 66 (expression -> expression > expression .)
    NEQ             reduce using rule 66 (expression -> expression > expression .)
    >               reduce using rule 66 (expression -> expression > expression .)
    <               reduce using rule 66 (expression -> expression > expression .)
    LE              reduce using rule 66 (expression -> expression > expression .)
    GE              reduce using rule 66 (expression -> expression > expression .)
    ;               reduce using rule 66 (expression -> expression > expression .)
    ,               reduce using rule 66 (expression -> expression > expression .)
    )               reduce using rule 66 (expression -> expression > expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    SHL             shift and go to state 69
    SHR             shift and go to state 64

  ! +               [ reduce using rule 66 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 66 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 66 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 66 (expression -> expression > expression .) ]
  ! %               [ reduce using rule 66 (expression -> expression > expression .) ]
  ! SHL             [ reduce using rule 66 (expression -> expression > expression .) ]
  ! SHR             [ reduce using rule 66 (expression -> expression > expression .) ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]
  ! EQ              [ shift and go to state 75 ]
  ! NEQ             [ shift and go to state 79 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 68 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 77 ]


state 119

    (69) expression -> expression GE expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 69 (expression -> expression GE expression .)
    &               reduce using rule 69 (expression -> expression GE expression .)
    ^               reduce using rule 69 (expression -> expression GE expression .)
    AND             reduce using rule 69 (expression -> expression GE expression .)
    OR              reduce using rule 69 (expression -> expression GE expression .)
    EQ              reduce using rule 69 (expression -> expression GE expression .)
    NEQ             reduce using rule 69 (expression -> expression GE expression .)
    >               reduce using rule 69 (expression -> expression GE expression .)
    <               reduce using rule 69 (expression -> expression GE expression .)
    LE              reduce using rule 69 (expression -> expression GE expression .)
    GE              reduce using rule 69 (expression -> expression GE expression .)
    ;               reduce using rule 69 (expression -> expression GE expression .)
    ,               reduce using rule 69 (expression -> expression GE expression .)
    )               reduce using rule 69 (expression -> expression GE expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    SHL             shift and go to state 69
    SHR             shift and go to state 64

  ! +               [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! %               [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! SHL             [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! SHR             [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]
  ! EQ              [ shift and go to state 75 ]
  ! NEQ             [ shift and go to state 79 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 68 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 77 ]


state 120

    (65) expression -> expression NEQ expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 65 (expression -> expression NEQ expression .)
    &               reduce using rule 65 (expression -> expression NEQ expression .)
    ^               reduce using rule 65 (expression -> expression NEQ expression .)
    AND             reduce using rule 65 (expression -> expression NEQ expression .)
    OR              reduce using rule 65 (expression -> expression NEQ expression .)
    EQ              reduce using rule 65 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 65 (expression -> expression NEQ expression .)
    >               reduce using rule 65 (expression -> expression NEQ expression .)
    <               reduce using rule 65 (expression -> expression NEQ expression .)
    LE              reduce using rule 65 (expression -> expression NEQ expression .)
    GE              reduce using rule 65 (expression -> expression NEQ expression .)
    ;               reduce using rule 65 (expression -> expression NEQ expression .)
    ,               reduce using rule 65 (expression -> expression NEQ expression .)
    )               reduce using rule 65 (expression -> expression NEQ expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    SHL             shift and go to state 69
    SHR             shift and go to state 64

  ! +               [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! -               [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! *               [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! /               [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! %               [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! SHL             [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! SHR             [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! |               [ shift and go to state 80 ]
  ! &               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]
  ! EQ              [ shift and go to state 75 ]
  ! NEQ             [ shift and go to state 79 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 68 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 77 ]


state 121

    (57) expression -> expression | expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 57 (expression -> expression | expression .)
    AND             reduce using rule 57 (expression -> expression | expression .)
    OR              reduce using rule 57 (expression -> expression | expression .)
    ;               reduce using rule 57 (expression -> expression | expression .)
    ,               reduce using rule 57 (expression -> expression | expression .)
    )               reduce using rule 57 (expression -> expression | expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    &               shift and go to state 67
    ^               shift and go to state 81
    SHL             shift and go to state 69
    SHR             shift and go to state 64
    EQ              shift and go to state 75
    NEQ             shift and go to state 79
    >               shift and go to state 76
    <               shift and go to state 68
    LE              shift and go to state 65
    GE              shift and go to state 77

  ! +               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! -               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! *               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! %               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! &               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! ^               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! SHL             [ reduce using rule 57 (expression -> expression | expression .) ]
  ! SHR             [ reduce using rule 57 (expression -> expression | expression .) ]
  ! EQ              [ reduce using rule 57 (expression -> expression | expression .) ]
  ! NEQ             [ reduce using rule 57 (expression -> expression | expression .) ]
  ! >               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! <               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! LE              [ reduce using rule 57 (expression -> expression | expression .) ]
  ! GE              [ reduce using rule 57 (expression -> expression | expression .) ]
  ! |               [ shift and go to state 80 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]


state 122

    (59) expression -> expression ^ expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 59 (expression -> expression ^ expression .)
    ^               reduce using rule 59 (expression -> expression ^ expression .)
    AND             reduce using rule 59 (expression -> expression ^ expression .)
    OR              reduce using rule 59 (expression -> expression ^ expression .)
    ;               reduce using rule 59 (expression -> expression ^ expression .)
    ,               reduce using rule 59 (expression -> expression ^ expression .)
    )               reduce using rule 59 (expression -> expression ^ expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    &               shift and go to state 67
    SHL             shift and go to state 69
    SHR             shift and go to state 64
    EQ              shift and go to state 75
    NEQ             shift and go to state 79
    >               shift and go to state 76
    <               shift and go to state 68
    LE              shift and go to state 65
    GE              shift and go to state 77

  ! +               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! %               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! &               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! SHL             [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! SHR             [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! EQ              [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! NEQ             [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! >               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! <               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! LE              [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! GE              [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! |               [ shift and go to state 80 ]
  ! ^               [ shift and go to state 81 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 74 ]


state 123

    (9) inits -> inits , init .

    ;               reduce using rule 9 (inits -> inits , init .)
    ,               reduce using rule 9 (inits -> inits , init .)


state 124

    (11) init -> ID . = expression

    =               shift and go to state 85


state 125

    (79) args_list_or_empty -> args_list .
    (81) args_list -> args_list . , arg

    )               reduce using rule 79 (args_list_or_empty -> args_list .)
    ,               shift and go to state 140


state 126

    (78) fundef -> TYPE ID ( args_list_or_empty . ) compound_instr

    )               shift and go to state 141


state 127

    (82) args_list -> arg .

    ,               reduce using rule 82 (args_list -> arg .)
    )               reduce using rule 82 (args_list -> arg .)


state 128

    (83) arg -> TYPE . ID

    ID              shift and go to state 142


state 129

    (11) init -> ID = expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    ;               reduce using rule 11 (init -> ID = expression .)
    ,               reduce using rule 11 (init -> ID = expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    |               shift and go to state 80
    &               shift and go to state 67
    ^               shift and go to state 81
    AND             shift and go to state 63
    OR              shift and go to state 74
    SHL             shift and go to state 69
    SHR             shift and go to state 64
    EQ              shift and go to state 75
    NEQ             shift and go to state 79
    >               shift and go to state 76
    <               shift and go to state 68
    LE              shift and go to state 65
    GE              shift and go to state 77


state 130

    (31) choice_instr -> IF ( condition ) . instruction
    (33) choice_instr -> IF ( condition ) . instruction ELSE instruction
    (16) instruction -> . print_instr
    (17) instruction -> . labeled_instr
    (18) instruction -> . assignment
    (19) instruction -> . choice_instr
    (20) instruction -> . while_instr
    (21) instruction -> . repeat_instr
    (22) instruction -> . return_instr
    (23) instruction -> . break_instr
    (24) instruction -> . continue_instr
    (25) instruction -> . compound_instr
    (26) instruction -> . expression ;
    (27) print_instr -> . PRINT expr_list ;
    (28) print_instr -> . PRINT error ;
    (29) labeled_instr -> . ID : instruction
    (30) assignment -> . ID = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions_opt }
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    PRINT           shift and go to state 17
    ID              shift and go to state 32
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    REPEAT          shift and go to state 25
    RETURN          shift and go to state 14
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 39
    {               shift and go to state 40
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    return_instr                   shift and go to state 20
    const                          shift and go to state 21
    assignment                     shift and go to state 27
    instruction                    shift and go to state 143
    compound_instr                 shift and go to state 30
    continue_instr                 shift and go to state 23
    labeled_instr                  shift and go to state 28
    print_instr                    shift and go to state 38
    choice_instr                   shift and go to state 15
    repeat_instr                   shift and go to state 19
    break_instr                    shift and go to state 35
    while_instr                    shift and go to state 24
    expression                     shift and go to state 41

state 131

    (32) choice_instr -> IF ( error ) . instruction
    (34) choice_instr -> IF ( error ) . instruction ELSE instruction
    (16) instruction -> . print_instr
    (17) instruction -> . labeled_instr
    (18) instruction -> . assignment
    (19) instruction -> . choice_instr
    (20) instruction -> . while_instr
    (21) instruction -> . repeat_instr
    (22) instruction -> . return_instr
    (23) instruction -> . break_instr
    (24) instruction -> . continue_instr
    (25) instruction -> . compound_instr
    (26) instruction -> . expression ;
    (27) print_instr -> . PRINT expr_list ;
    (28) print_instr -> . PRINT error ;
    (29) labeled_instr -> . ID : instruction
    (30) assignment -> . ID = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions_opt }
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    PRINT           shift and go to state 17
    ID              shift and go to state 32
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    REPEAT          shift and go to state 25
    RETURN          shift and go to state 14
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 39
    {               shift and go to state 40
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    return_instr                   shift and go to state 20
    const                          shift and go to state 21
    assignment                     shift and go to state 27
    instruction                    shift and go to state 144
    compound_instr                 shift and go to state 30
    continue_instr                 shift and go to state 23
    while_instr                    shift and go to state 24
    print_instr                    shift and go to state 38
    choice_instr                   shift and go to state 15
    break_instr                    shift and go to state 35
    labeled_instr                  shift and go to state 28
    expression                     shift and go to state 41
    repeat_instr                   shift and go to state 19

state 132

    (72) expr_list -> expr_list , expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    ;               reduce using rule 72 (expr_list -> expr_list , expression .)
    ,               reduce using rule 72 (expr_list -> expr_list , expression .)
    )               reduce using rule 72 (expr_list -> expr_list , expression .)
    +               shift and go to state 70
    -               shift and go to state 72
    *               shift and go to state 71
    /               shift and go to state 73
    %               shift and go to state 66
    |               shift and go to state 80
    &               shift and go to state 67
    ^               shift and go to state 81
    AND             shift and go to state 63
    OR              shift and go to state 74
    SHL             shift and go to state 69
    SHR             shift and go to state 64
    EQ              shift and go to state 75
    NEQ             shift and go to state 79
    >               shift and go to state 76
    <               shift and go to state 68
    LE              shift and go to state 65
    GE              shift and go to state 77


state 133

    (35) while_instr -> WHILE ( condition ) . instruction
    (16) instruction -> . print_instr
    (17) instruction -> . labeled_instr
    (18) instruction -> . assignment
    (19) instruction -> . choice_instr
    (20) instruction -> . while_instr
    (21) instruction -> . repeat_instr
    (22) instruction -> . return_instr
    (23) instruction -> . break_instr
    (24) instruction -> . continue_instr
    (25) instruction -> . compound_instr
    (26) instruction -> . expression ;
    (27) print_instr -> . PRINT expr_list ;
    (28) print_instr -> . PRINT error ;
    (29) labeled_instr -> . ID : instruction
    (30) assignment -> . ID = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions_opt }
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    PRINT           shift and go to state 17
    ID              shift and go to state 32
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    REPEAT          shift and go to state 25
    RETURN          shift and go to state 14
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 39
    {               shift and go to state 40
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    return_instr                   shift and go to state 20
    const                          shift and go to state 21
    assignment                     shift and go to state 27
    instruction                    shift and go to state 145
    compound_instr                 shift and go to state 30
    continue_instr                 shift and go to state 23
    labeled_instr                  shift and go to state 28
    print_instr                    shift and go to state 38
    choice_instr                   shift and go to state 15
    repeat_instr                   shift and go to state 19
    break_instr                    shift and go to state 35
    while_instr                    shift and go to state 24
    expression                     shift and go to state 41

state 134

    (36) while_instr -> WHILE ( error ) . instruction
    (16) instruction -> . print_instr
    (17) instruction -> . labeled_instr
    (18) instruction -> . assignment
    (19) instruction -> . choice_instr
    (20) instruction -> . while_instr
    (21) instruction -> . repeat_instr
    (22) instruction -> . return_instr
    (23) instruction -> . break_instr
    (24) instruction -> . continue_instr
    (25) instruction -> . compound_instr
    (26) instruction -> . expression ;
    (27) print_instr -> . PRINT expr_list ;
    (28) print_instr -> . PRINT error ;
    (29) labeled_instr -> . ID : instruction
    (30) assignment -> . ID = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions_opt }
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    PRINT           shift and go to state 17
    ID              shift and go to state 32
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    REPEAT          shift and go to state 25
    RETURN          shift and go to state 14
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 39
    {               shift and go to state 40
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    return_instr                   shift and go to state 20
    const                          shift and go to state 21
    assignment                     shift and go to state 27
    instruction                    shift and go to state 146
    compound_instr                 shift and go to state 30
    continue_instr                 shift and go to state 23
    while_instr                    shift and go to state 24
    print_instr                    shift and go to state 38
    choice_instr                   shift and go to state 15
    break_instr                    shift and go to state 35
    labeled_instr                  shift and go to state 28
    expression                     shift and go to state 41
    repeat_instr                   shift and go to state 19

state 135

    (37) repeat_instr -> REPEAT instructions UNTIL condition . ;

    ;               shift and go to state 147


state 136

    (50) expression -> ID ( expr_list_or_empty ) .

    +               reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    -               reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    *               reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    /               reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    %               reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    |               reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    &               reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    ^               reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    AND             reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    OR              reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    SHL             reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    SHR             reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    EQ              reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    NEQ             reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    >               reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    <               reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    LE              reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    GE              reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    ;               reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    ,               reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)
    )               reduce using rule 50 (expression -> ID ( expr_list_or_empty ) .)


state 137

    (51) expression -> ID ( error ) .

    +               reduce using rule 51 (expression -> ID ( error ) .)
    -               reduce using rule 51 (expression -> ID ( error ) .)
    *               reduce using rule 51 (expression -> ID ( error ) .)
    /               reduce using rule 51 (expression -> ID ( error ) .)
    %               reduce using rule 51 (expression -> ID ( error ) .)
    |               reduce using rule 51 (expression -> ID ( error ) .)
    &               reduce using rule 51 (expression -> ID ( error ) .)
    ^               reduce using rule 51 (expression -> ID ( error ) .)
    AND             reduce using rule 51 (expression -> ID ( error ) .)
    OR              reduce using rule 51 (expression -> ID ( error ) .)
    SHL             reduce using rule 51 (expression -> ID ( error ) .)
    SHR             reduce using rule 51 (expression -> ID ( error ) .)
    EQ              reduce using rule 51 (expression -> ID ( error ) .)
    NEQ             reduce using rule 51 (expression -> ID ( error ) .)
    >               reduce using rule 51 (expression -> ID ( error ) .)
    <               reduce using rule 51 (expression -> ID ( error ) .)
    LE              reduce using rule 51 (expression -> ID ( error ) .)
    GE              reduce using rule 51 (expression -> ID ( error ) .)
    ;               reduce using rule 51 (expression -> ID ( error ) .)
    ,               reduce using rule 51 (expression -> ID ( error ) .)
    )               reduce using rule 51 (expression -> ID ( error ) .)


state 138

    (30) assignment -> ID = expression ; .

    PRINT           reduce using rule 30 (assignment -> ID = expression ; .)
    ID              reduce using rule 30 (assignment -> ID = expression ; .)
    IF              reduce using rule 30 (assignment -> ID = expression ; .)
    WHILE           reduce using rule 30 (assignment -> ID = expression ; .)
    REPEAT          reduce using rule 30 (assignment -> ID = expression ; .)
    RETURN          reduce using rule 30 (assignment -> ID = expression ; .)
    BREAK           reduce using rule 30 (assignment -> ID = expression ; .)
    CONTINUE        reduce using rule 30 (assignment -> ID = expression ; .)
    {               reduce using rule 30 (assignment -> ID = expression ; .)
    (               reduce using rule 30 (assignment -> ID = expression ; .)
    INTEGER         reduce using rule 30 (assignment -> ID = expression ; .)
    FLOAT           reduce using rule 30 (assignment -> ID = expression ; .)
    STRING          reduce using rule 30 (assignment -> ID = expression ; .)
    }               reduce using rule 30 (assignment -> ID = expression ; .)
    TYPE            reduce using rule 30 (assignment -> ID = expression ; .)
    error           reduce using rule 30 (assignment -> ID = expression ; .)
    $end            reduce using rule 30 (assignment -> ID = expression ; .)
    UNTIL           reduce using rule 30 (assignment -> ID = expression ; .)
    ELSE            reduce using rule 30 (assignment -> ID = expression ; .)


state 139

    (41) compound_instr -> { declarations instructions_opt } .

    PRINT           reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    ID              reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    IF              reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    WHILE           reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    REPEAT          reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    RETURN          reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    BREAK           reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    CONTINUE        reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    {               reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    (               reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    INTEGER         reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    FLOAT           reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    STRING          reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    TYPE            reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    error           reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    $end            reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    UNTIL           reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    }               reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)
    ELSE            reduce using rule 41 (compound_instr -> { declarations instructions_opt } .)


state 140

    (81) args_list -> args_list , . arg
    (83) arg -> . TYPE ID

    TYPE            shift and go to state 128

    arg                            shift and go to state 148

state 141

    (78) fundef -> TYPE ID ( args_list_or_empty ) . compound_instr
    (41) compound_instr -> . { declarations instructions_opt }

    {               shift and go to state 40

    compound_instr                 shift and go to state 149

state 142

    (83) arg -> TYPE ID .

    ,               reduce using rule 83 (arg -> TYPE ID .)
    )               reduce using rule 83 (arg -> TYPE ID .)


state 143

    (31) choice_instr -> IF ( condition ) instruction .
    (33) choice_instr -> IF ( condition ) instruction . ELSE instruction

    PRINT           reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    ID              reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    IF              reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    WHILE           reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    REPEAT          reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    RETURN          reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    BREAK           reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    {               reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    (               reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    INTEGER         reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    FLOAT           reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    STRING          reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    TYPE            reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    error           reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    $end            reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    UNTIL           reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    }               reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    ELSE            shift and go to state 150

  ! ELSE            [ reduce using rule 31 (choice_instr -> IF ( condition ) instruction .) ]


state 144

    (32) choice_instr -> IF ( error ) instruction .
    (34) choice_instr -> IF ( error ) instruction . ELSE instruction

    PRINT           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    ID              reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    IF              reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    WHILE           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    REPEAT          reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    RETURN          reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    BREAK           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    CONTINUE        reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    {               reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    (               reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    INTEGER         reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    FLOAT           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    STRING          reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    TYPE            reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    error           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    $end            reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    UNTIL           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    }               reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    ELSE            shift and go to state 151

  ! ELSE            [ reduce using rule 32 (choice_instr -> IF ( error ) instruction .) ]


state 145

    (35) while_instr -> WHILE ( condition ) instruction .

    UNTIL           reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    ID              reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    IF              reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    REPEAT          reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    {               reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    (               reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    INTEGER         reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    FLOAT           reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    STRING          reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    TYPE            reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    error           reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    $end            reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    }               reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)


state 146

    (36) while_instr -> WHILE ( error ) instruction .

    UNTIL           reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    PRINT           reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    ID              reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    IF              reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    WHILE           reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    REPEAT          reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    RETURN          reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    BREAK           reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    CONTINUE        reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    {               reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    (               reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    INTEGER         reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    FLOAT           reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    STRING          reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    TYPE            reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    error           reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    $end            reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    }               reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    ELSE            reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)


state 147

    (37) repeat_instr -> REPEAT instructions UNTIL condition ; .

    PRINT           reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ID              reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    IF              reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    WHILE           reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    REPEAT          reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    RETURN          reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    BREAK           reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    CONTINUE        reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    {               reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    (               reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    INTEGER         reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    FLOAT           reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    STRING          reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    }               reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    UNTIL           reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    TYPE            reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    error           reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    $end            reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ELSE            reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)


state 148

    (81) args_list -> args_list , arg .

    ,               reduce using rule 81 (args_list -> args_list , arg .)
    )               reduce using rule 81 (args_list -> args_list , arg .)


state 149

    (78) fundef -> TYPE ID ( args_list_or_empty ) compound_instr .

    TYPE            reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    PRINT           reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    ID              reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    IF              reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    WHILE           reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    REPEAT          reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    RETURN          reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    BREAK           reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    CONTINUE        reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    {               reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    (               reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    INTEGER         reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    FLOAT           reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    STRING          reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    error           reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    $end            reduce using rule 78 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)


state 150

    (33) choice_instr -> IF ( condition ) instruction ELSE . instruction
    (16) instruction -> . print_instr
    (17) instruction -> . labeled_instr
    (18) instruction -> . assignment
    (19) instruction -> . choice_instr
    (20) instruction -> . while_instr
    (21) instruction -> . repeat_instr
    (22) instruction -> . return_instr
    (23) instruction -> . break_instr
    (24) instruction -> . continue_instr
    (25) instruction -> . compound_instr
    (26) instruction -> . expression ;
    (27) print_instr -> . PRINT expr_list ;
    (28) print_instr -> . PRINT error ;
    (29) labeled_instr -> . ID : instruction
    (30) assignment -> . ID = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions_opt }
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    PRINT           shift and go to state 17
    ID              shift and go to state 32
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    REPEAT          shift and go to state 25
    RETURN          shift and go to state 14
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 39
    {               shift and go to state 40
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    return_instr                   shift and go to state 20
    const                          shift and go to state 21
    assignment                     shift and go to state 27
    instruction                    shift and go to state 152
    compound_instr                 shift and go to state 30
    continue_instr                 shift and go to state 23
    labeled_instr                  shift and go to state 28
    print_instr                    shift and go to state 38
    choice_instr                   shift and go to state 15
    repeat_instr                   shift and go to state 19
    break_instr                    shift and go to state 35
    while_instr                    shift and go to state 24
    expression                     shift and go to state 41

state 151

    (34) choice_instr -> IF ( error ) instruction ELSE . instruction
    (16) instruction -> . print_instr
    (17) instruction -> . labeled_instr
    (18) instruction -> . assignment
    (19) instruction -> . choice_instr
    (20) instruction -> . while_instr
    (21) instruction -> . repeat_instr
    (22) instruction -> . return_instr
    (23) instruction -> . break_instr
    (24) instruction -> . continue_instr
    (25) instruction -> . compound_instr
    (26) instruction -> . expression ;
    (27) print_instr -> . PRINT expr_list ;
    (28) print_instr -> . PRINT error ;
    (29) labeled_instr -> . ID : instruction
    (30) assignment -> . ID = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions_opt }
    (46) expression -> . const
    (47) expression -> . ID
    (48) expression -> . ( expression )
    (49) expression -> . ( error )
    (50) expression -> . ID ( expr_list_or_empty )
    (51) expression -> . ID ( error )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (43) const -> . INTEGER
    (44) const -> . FLOAT
    (45) const -> . STRING

    PRINT           shift and go to state 17
    ID              shift and go to state 32
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    REPEAT          shift and go to state 25
    RETURN          shift and go to state 14
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 39
    {               shift and go to state 40
    (               shift and go to state 22
    INTEGER         shift and go to state 31
    FLOAT           shift and go to state 34
    STRING          shift and go to state 26

    return_instr                   shift and go to state 20
    const                          shift and go to state 21
    assignment                     shift and go to state 27
    instruction                    shift and go to state 153
    compound_instr                 shift and go to state 30
    continue_instr                 shift and go to state 23
    while_instr                    shift and go to state 24
    print_instr                    shift and go to state 38
    choice_instr                   shift and go to state 15
    break_instr                    shift and go to state 35
    labeled_instr                  shift and go to state 28
    expression                     shift and go to state 41
    repeat_instr                   shift and go to state 19

state 152

    (33) choice_instr -> IF ( condition ) instruction ELSE instruction .

    PRINT           reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    REPEAT          reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    {               reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    (               reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    INTEGER         reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    FLOAT           reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    STRING          reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    TYPE            reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    error           reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    UNTIL           reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)


state 153

    (34) choice_instr -> IF ( error ) instruction ELSE instruction .

    PRINT           reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ID              reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    IF              reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    WHILE           reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    REPEAT          reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    RETURN          reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    BREAK           reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    {               reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    (               reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    INTEGER         reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    FLOAT           reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    STRING          reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    TYPE            reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    error           reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    $end            reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    UNTIL           reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    }               reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ELSE            reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TYPE in state 3 resolved as shift
WARNING: shift/reduce conflict for error in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 6 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 8 resolved as shift
WARNING: shift/reduce conflict for ID in state 8 resolved as shift
WARNING: shift/reduce conflict for IF in state 8 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 8 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 8 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 8 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 8 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 8 resolved as shift
WARNING: shift/reduce conflict for { in state 8 resolved as shift
WARNING: shift/reduce conflict for ( in state 8 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 8 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 8 resolved as shift
WARNING: shift/reduce conflict for STRING in state 8 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 33 resolved as shift
WARNING: shift/reduce conflict for ID in state 33 resolved as shift
WARNING: shift/reduce conflict for IF in state 33 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 33 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 33 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 33 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 33 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 33 resolved as shift
WARNING: shift/reduce conflict for { in state 33 resolved as shift
WARNING: shift/reduce conflict for ( in state 33 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 33 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 33 resolved as shift
WARNING: shift/reduce conflict for STRING in state 33 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> elements)
WARNING: rejected rule (declarations -> <empty>) in state 2
